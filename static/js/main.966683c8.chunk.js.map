{"version":3,"sources":["logic/util.js","logic/evaluate.js","logic/treeGenerator.js","logic/fitness.js","inputs.js","visuals.js","logic/Component.js","logic/functions.js","logic/Algorithm.js","App.js","reportWebVitals.js","reducers.js","index.js"],"names":["randomInt","range","Math","floor","random","trueWithProbabilty","probabilty","choose","choices","length","structuredClone","obj","JSON","parse","stringify","getRandom","min","max","sample","arr","size","indexes","Array","keys","map","sort","i","stringifyTleaf","specimen","value","Number","isInteger","toFixed","stringifySpecimen","type","name","children","join","tournament","specimenArray","tourmanentWinningProbability","specimenToCode","functions","codified","codify","childrenMapped","code","functionsUsed","toCode","e","reduce","x","y","console","log","Object","filter","codeAddition","mapSpecimenToStorable","function","fitness","module","exports","specimenEvaluator","evaluator","variables","node","Tvalue","require","countSubNodes","subNodesCount","generateTree","mode","functionsMetaArray","leaves","maxLevel","currentLevel","generate","toLowerCase","chosen","arity","level","getNode","numberOfNode","parent","childNumber","child","mutate","newSpecimen","crossover","specimen1","specimen2","newSpecimen1","newSpecimen2","numberOfNodeToReplace1","numberOfNodeToReplace2","node1","childNumber1","node2","childNumber2","tmp","evaluate","points","point","assignFitness","useStyles","makeStyles","theme","root","margin","spacing","width","Container","connect","state","problemType","populationSize","numberOfGenerations","maxTreeDepth","tournamentSize","tournamentWinningProbability","crossoverProbability","pointsRaw","leavesRaw","algorithmState","dispatch","setValue","field","setFunction","event","target","checked","algorithm","classes","capitalise","toUpperCase","slice","runButtonFunction","a","finished","runIfNotFinished","className","noValidate","autoComplete","FormControl","component","FormLabel","RadioGroup","aria-label","onChange","FormControlLabel","control","Radio","disabled","label","stateField","TextField","id","split","InputLabelProps","shrink","variant","multiline","rows","key","Checkbox","Button","color","onClick","startAndCreateFirstGeneration","createNextGeneration","table","minWidth","generation","currentGeneration","bestSpecimens","bestSpecimen","useState","setCode","mapSpecimenToRow","row","title","TableRow","TableCell","scope","align","language","TableContainer","Paper","Table","TableHead","TableBody","setFunctions","setAlgorithmState","setCurrentGeneration","setBestSpecimens","setBestSpecimen","setProperty","setUserSelectedFunctions","getUserSelectedFunctions","setReduxSetters","protectedDivide","b","protectedLog","protectedSqrt","sqrt","abs","addNameAndArity","R","v","k","add","subtract","multiply","divide","toString","exp","pow","sin","cos","neg","Algorithm","this","inputs","running","reduxSetters","functionsArray","values","userSelectedFunctions","currentGenerationNumber","sortingFunction","isNaN","setters","line","vars","xs","acc","fromInput","startsWith","endsWith","fromPoints","leavesFunctions","forEach","newGeneration","specimenArray1","specimenArray2","chosen1","chosen2","parsePoints","parseLeaves","createGenerationZero","setBestSpecimensRedux","generateNextGeneration","bestSpecimenThisGeneration","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.966683c8.chunk.js","sourcesContent":["export function randomInt(range) {\n  return Math.floor(Math.random() * range)\n}\n\nexport function trueWithProbabilty(probabilty) {\n  return Math.random() < probabilty\n}\n\nexport function choose(choices) {\n  const index = randomInt(choices.length)\n  return choices[index]\n}\n\nexport const structuredClone = (obj) => {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nexport function getRandom(min, max) {\n  return Math.random() * (max - min) + min\n}\n\nexport function sample(arr, size) {\n  const indexes = [...Array(size).keys()].map(() => randomInt(arr.length))\n  indexes.sort()\n  return indexes.map((i) => arr[i])\n}\n\nexport function stringifyTleaf(specimen) {\n  return specimen.value.length\n    ? specimen.value\n    : Number.isInteger(specimen.value)\n    ? specimen.value\n    : specimen.value.toFixed(5)\n}\n\nexport function stringifySpecimen(specimen) {\n  return specimen.type === 'T'\n    ? `${stringifyTleaf(specimen)}`\n    : `${specimen.name}(${specimen.children ? specimen.children.map(stringifySpecimen).join(',') : ''})`\n}\n\nexport function tournament(specimenArray, tourmanentWinningProbability) {\n  for (const specimen of specimenArray) {\n    if (trueWithProbabilty(tourmanentWinningProbability)) {\n      return specimen\n    }\n  }\n  return specimenArray[specimenArray.length - 1]\n}\n\nexport function specimenToCode(specimen, functions) {\n  function codify(specimen) {\n    const childrenMapped = specimen.children ? specimen.children.map(codify) : null\n    return specimen.type === 'T'\n      ? { code: `${stringifyTleaf(specimen)}`, functionsUsed: {} }\n      : {\n          code: functions[specimen.name].toCode(...childrenMapped.map((e) => e.code)),\n          functionsUsed: {\n            ...(childrenMapped ? childrenMapped.map((e) => e.functionsUsed) : []).reduce((x, y) => ({ ...x, ...y })),\n            [specimen.name]: 1,\n          },\n        }\n  }\n  const codified = codify(specimen)\n  console.log(Object.keys(codified.functionsUsed))\n  console.log(Object.keys(codified.functionsUsed).filter((e) => functions[e].codeAddition))\n  console.log(\n    Object.keys(codified.functionsUsed)\n      .filter((e) => functions[e].codeAddition)\n      .map((e) => functions[e].codeAddition),\n  )\n  return `const myFunction() => ${codified.code}\\n${Object.keys(codified.functionsUsed)\n    .filter((e) => functions[e].codeAddition)\n    .map((e) => functions[e].codeAddition)\n    .join('\\n')}`\n}\n\nexport function mapSpecimenToStorable(e, functions) {\n  return { function: stringifySpecimen(e), fitness: e.fitness.toFixed(5), code: specimenToCode(e, functions) }\n}\n\n// module.exports = {\n//   getRandom,\n//   randomInt,\n//   trueWithProbabilty,\n//   choose,\n//   structuredClone,\n//   sample,\n//   stringifySpecimen,\n//   tournament,\n//   mapSpecimenToStorable,\n// }\n","function specimenEvaluator(functions) {\n  function evaluator(variables, specimen) {\n    function Tvalue(node) {\n      return variables[node.value] ?? node.value\n    }\n    return specimen.type === 'F'\n      ? functions[specimen.name].function(...specimen.children.map((x) => evaluator(variables, x)))\n      : Tvalue(specimen)\n  }\n  return evaluator\n}\nmodule.exports = {\n  specimenEvaluator,\n}\n","const { choose, structuredClone, randomInt } = require('./util')\n\nfunction countSubNodes(specimen) {\n  specimen.subNodesCount =\n    1 +\n    (!!specimen.children\n      ? specimen.children\n          .map((x) => {\n            countSubNodes(x)\n            return x.subNodesCount\n          })\n          .reduce((x, y) => x + y)\n      : 0)\n  return specimen\n}\nfunction generateTree(mode, functionsMetaArray, leaves, maxLevel, currentLevel = 1) {\n  function generate(currentLevel) {\n    const choices =\n      currentLevel === maxLevel\n        ? leaves\n        : mode.toLowerCase() === 'full' || currentLevel === 1\n        ? functionsMetaArray\n        : [...functionsMetaArray, ...leaves]\n    const chosen = choose(choices)\n    return !chosen.arity\n      ? {\n          type: 'T',\n          value: chosen(),\n          level: currentLevel,\n        }\n      : {\n          type: 'F',\n          name: chosen.name,\n          level: currentLevel,\n          children: [...Array(chosen.arity)].map(() => generate(currentLevel + 1)),\n        }\n  }\n  return countSubNodes(generate(currentLevel))\n}\nfunction getNode(specimen, numberOfNode, parent = null, childNumber = null) {\n  //              10\n  //         /         \\\n  //        5           9\n  //       / \\           \\\n  //      2   4           8\n  //    / \\    \\         / \\\n  //   0   1     3      6   7\n  if (numberOfNode === 0 && !specimen.children) {\n    return { node: parent, childNumber }\n  }\n  for (const childNumber in specimen.children) {\n    const child = specimen.children[childNumber]\n    if (numberOfNode < child.subNodesCount) {\n      return getNode(child, numberOfNode, specimen, childNumber)\n    } else {\n      numberOfNode -= child.subNodesCount\n    }\n  }\n  return { node: parent, childNumber }\n}\n\nfunction mutate(specimen, mode, functionsMetaArray, leaves, maxLevel) {\n  const newSpecimen = structuredClone(specimen)\n  const numberOfNodeToReplace = randomInt(newSpecimen.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace)\n  const { node, childNumber } = getNode(specimen, numberOfNodeToReplace)\n  //   console.log(stringifySpecimen(node))\n  //   console.log(childNumber)\n  node.children[childNumber] = generateTree(mode, functionsMetaArray, leaves, maxLevel, node.level + 1)\n  //   console.log(stringifySpecimen(node))\n  return countSubNodes(specimen)\n}\n\nfunction crossover(specimen1, specimen2) {\n  const newSpecimen1 = structuredClone(specimen1)\n  const newSpecimen2 = structuredClone(specimen2)\n  const numberOfNodeToReplace1 = randomInt(newSpecimen1.subNodesCount - 1)\n  const numberOfNodeToReplace2 = randomInt(newSpecimen2.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace1, numberOfNodeToReplace2)\n  const { node: node1, childNumber: childNumber1 } = getNode(newSpecimen1, numberOfNodeToReplace1)\n  const { node: node2, childNumber: childNumber2 } = getNode(newSpecimen2, numberOfNodeToReplace2)\n\n  const tmp = node1.children[childNumber1]\n  node1.children[childNumber1] = node2.children[childNumber2]\n  node2.children[childNumber2] = tmp\n\n  return [countSubNodes(newSpecimen1), countSubNodes(newSpecimen2)]\n}\n\nmodule.exports = {\n  generateTree,\n  mutate,\n  crossover,\n}\n","function fitness(evaluate, points, specimen) {\n  return points\n    .map((point) => point.y - evaluate(point, specimen))\n    .map((x) => x * x)\n    .reduce((x, y) => x + y)\n}\n\nfunction assignFitness(evaluate, points, specimen) {\n  //   console.log({ specimen })\n  specimen.fitness = Number(fitness(evaluate, points, specimen).toFixed(5))\n  return specimen\n}\n\nmodule.exports = {\n  fitness,\n  assignFitness,\n}\n","import React from 'react'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { connect } from 'react-redux'\nimport Checkbox from '@material-ui/core/Checkbox'\n// import * as R from 'ramda'\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n    '& > div > *': {\n      margin: theme.spacing(1),\n    },\n  },\n}))\n\nfunction Inputs({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setValue,\n  functions,\n  setFunction,\n  algorithmState,\n}) {\n  const classes = useStyles()\n\n  const capitalise = (e) => e[0].toUpperCase() + e.slice(1)\n\n  // const runButtonFunction = () => {\n  //   algorithm.startAndCreateFirstGeneration()\n\n  //   for (let i = 0; i < algorithm.numberOfGenerations - 1; i++) {\n  //     console.log('Generacja', i)\n  //     await algorithm.createNextGeneration()\n  //   }\n  // }\n\n  const createGenerationZeroButtonFunction = () => {\n    algorithm.startAndCreateFirstGeneration()\n  }\n\n  const createNextGenerationButtonFunction = () => {\n    algorithm.createNextGeneration()\n  }\n\n  const runButtonFunction = async () => {\n    let finished = false\n    while (!finished) {\n      finished = await algorithm.runIfNotFinished()\n    }\n  }\n\n  return (\n    <form className={classes.root} noValidate autoComplete='off'>\n      <div>\n        <FormControl component='fieldset'>\n          <FormLabel component='legend'>Problem type</FormLabel>\n          <RadioGroup\n            aria-label='problem-type'\n            name='problem-type'\n            value={problemType}\n            onChange={(event) => setValue('problemType', event.target.value)}\n          >\n            {['real', 'integer'].map((e) => (\n              <FormControlLabel\n                key={e}\n                value={e}\n                control={<Radio disabled={algorithmState !== 'BEFORE_RUN'} />}\n                label={capitalise(e)}\n              />\n            ))}\n          </RadioGroup>\n        </FormControl>\n        {[\n          { name: 'population-size', value: populationSize, stateField: 'populationSize' },\n          { name: 'number-of-generations', value: numberOfGenerations, stateField: 'numberOfGenerations' },\n          { name: 'max-tree-depth', value: maxTreeDepth, stateField: 'maxTreeDepth' },\n          { name: 'tournament-size', value: tournamentSize, stateField: 'tournamentSize' },\n          {\n            name: 'tournament-winning-probability',\n            value: tournamentWinningProbability,\n            stateField: 'tournamentWinningProbability',\n          },\n          { name: 'crossover-probabilty', value: crossoverProbability, stateField: 'crossoverProbability' },\n        ].map(({ name, value, stateField }) => (\n          <TextField\n            id={name}\n            key={name}\n            label={name.split('-').map(capitalise).join(' ')}\n            type='number'\n            value={value}\n            onChange={(e) => setValue(stateField, Number(e.target.value))}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant='outlined'\n            disabled={algorithmState !== 'BEFORE_RUN'}\n          />\n        ))}\n        <TextField\n          id='points'\n          label='Points (last column is y)'\n          multiline\n          rows={10}\n          value={pointsRaw}\n          variant='outlined'\n          onChange={(e) => setValue('pointsRaw', e.target.value)}\n          disabled={algorithmState !== 'BEFORE_RUN'}\n        />\n        <TextField\n          id='leaves'\n          label='Possible leaves'\n          multiline\n          rows={10}\n          value={leavesRaw}\n          variant='outlined'\n          onChange={(e) => setValue('leavesRaw', e.target.value)}\n          disabled={algorithmState !== 'BEFORE_RUN'}\n        />\n        <FormControl component='fieldset'>\n          {Object.keys(functions).map((key) => (\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={functions[key]}\n                  name={key}\n                  key={key}\n                  onChange={(event) => {\n                    setFunction(event)\n                  }}\n                  disabled={algorithmState !== 'BEFORE_RUN'}\n                />\n              }\n              label={key}\n            />\n          ))}\n        </FormControl>\n      </div>\n\n      <div>\n        <Button variant='contained' color='primary' onClick={createGenerationZeroButtonFunction}>\n          Create first generation\n        </Button>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={createNextGenerationButtonFunction}\n          disabled={algorithmState === 'BEFORE_RUN'}\n        >\n          Create Next Generation\n        </Button>\n        <Button variant='contained' color='primary' onClick={runButtonFunction}>\n          Run\n        </Button>\n        {/* <Button variant='contained' color='primary'>\n          Primary\n        </Button>\n        <Button variant='contained' color='primary'>\n          Primary\n        </Button> */}\n      </div>\n    </form>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Inputs)\nexport default Container\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { connect } from 'react-redux'\nimport Highlight from 'react-highlight.js'\nimport Button from '@material-ui/core/Button'\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n})\n\nfunction Visuals({ generation, bestSpecimens, bestSpecimen }) {\n  const classes = useStyles()\n  const [code, setCode] = useState(bestSpecimen?.code)\n  const mapSpecimenToRow = (row, i, title) => (\n    <TableRow key={i}>\n      <TableCell component='th' scope='row' align='right'>\n        {title || i + 1}\n      </TableCell>\n      <TableCell align='right'>{row.function}</TableCell>\n      <TableCell align='right'>{row.fitness}</TableCell>\n      <TableCell align='right'>\n        <Button variant='contained' color='primary' onClick={() => setCode(row.code)}>\n          Show code\n        </Button>\n      </TableCell>\n    </TableRow>\n  )\n  return (\n    <>\n      <h1>Generation: {generation}</h1>\n      {code || bestSpecimen?.code ? (\n        <>\n          <h2>Code:</h2>\n          <Highlight language='javascript'>{code || bestSpecimen?.code}</Highlight>\n        </>\n      ) : (\n        <></>\n      )}\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label='simple table'>\n          {(bestSpecimen ? [bestSpecimen] : []).map((row, i) => mapSpecimenToRow(row, i, 'Global Best'))}\n          <TableHead>\n            <TableRow>\n              <TableCell align='right'>Number</TableCell>\n              <TableCell align='right'>Function</TableCell>\n              <TableCell align='right'>Error Squared</TableCell>\n              <TableCell align='right'>Show Code</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{bestSpecimens.map((row, i) => mapSpecimenToRow(row, i))}</TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  )\n}\nconst mapStateToProps = (state) => {\n  const { currentGeneration, bestSpecimens, bestSpecimen } = state\n  return {\n    generation: currentGeneration,\n    bestSpecimens,\n    bestSpecimen,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    // setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Visuals)\nexport default Container\n","import React from 'react'\nimport { connect } from 'react-redux'\n// import * as R from 'ramda'\n\nfunction App({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setFunctions,\n  functions,\n  setAlgorithmState,\n  setCurrentGeneration,\n  setBestSpecimens,\n  setBestSpecimen,\n}) {\n  algorithm.setProperty('problemType', problemType)\n  algorithm.setProperty('populationSize', Number(populationSize))\n  algorithm.setProperty('numberOfGenerations', Number(numberOfGenerations))\n  algorithm.setProperty('maxTreeDepth', Number(maxTreeDepth))\n  algorithm.setProperty('tournamentSize', Number(tournamentSize))\n  algorithm.setProperty('tournamentWinningProbability', Number(tournamentWinningProbability))\n  algorithm.setProperty('crossoverProbability', Number(crossoverProbability))\n  algorithm.setProperty('pointsRaw', pointsRaw)\n  algorithm.setProperty('leavesRaw', leavesRaw)\n  if (Object.keys(functions).length !== 0) {\n    algorithm.setUserSelectedFunctions(functions)\n  } else {\n    setFunctions(algorithm.getUserSelectedFunctions())\n  }\n  algorithm.setReduxSetters({ setAlgorithmState, setCurrentGeneration, setBestSpecimens, setBestSpecimen })\n  return <></>\n}\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setFunctions: (functions) => dispatch({ type: 'SET_FUNCTIONS', functions }),\n    setAlgorithmState: (value) => dispatch({ type: 'SET_ALGORITHM_STATE', value }),\n    setCurrentGeneration: (value) => dispatch({ type: 'SET_CURRENT_GENERATION', value }),\n    setBestSpecimens: (value) => dispatch({ type: 'SET_BEST_SPECIMENS', value }),\n    setBestSpecimen: (value) => dispatch({ type: 'SET_BEST_SPECIMEN', value }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App)\nexport default Container\n","import * as R from 'ramda'\n\nconst addNameAndArity = R.mapObjIndexed((v, k) => ({ ...v, name: k, arity: v.function.length }))\n\nconst protectedDivide = (a, b) => (b !== 0 ? a / b : a)\n\nconst protectedLog = (a, b) => (a > 0 && b > 0 && a !== 1 ? Math.log(b) / Math.log(a) : 0)\n\nconst protectedSqrt = (a) => Math.sqrt(Math.abs(a))\n\nexport default addNameAndArity({\n  add: {\n    function: (a, b) => a + b,\n    toCode: (a, b) => `${a} + ${b}`,\n  },\n  subtract: {\n    function: (a, b) => a - b,\n    toCode: (a, b) => `${a} - ${b}`,\n  },\n  multiply: {\n    function: (a, b) => a * b,\n    toCode: (a, b) => `${a} * ${b}`,\n  },\n  divide: {\n    function: (a, b) => a / b,\n    toCode: (a, b) => `${a} / ${b}`,\n  },\n  protectedDivide: {\n    function: protectedDivide,\n    toCode: (a, b) => `protectedDivide(${a}, ${b})`,\n    codeAddition: `const protectedDivide = ${protectedDivide.toString()}`,\n  },\n  min: {\n    function: (a, b) => Math.min(a, b),\n    toCode: (a, b) => `Math.min(${a}, ${b})`,\n  },\n  max: {\n    function: (a, b) => Math.max(a, b),\n    toCode: (a, b) => `Math.max(${a}, ${b})`,\n    // codeAddition: 'const max = (a, b) => Math.max(a, b)',\n  },\n  exp: {\n    function: (a) => Math.exp(a),\n    toCode: (a) => `Math.exp(${a})`,\n  },\n  pow: {\n    function: (a, b) => Math.pow(a, b),\n    toCode: (a, b) => `Math.pow(${a}, ${b})`,\n  },\n  log: {\n    function: (a, b) => Math.pow(a, b),\n    toCode: (a, b) => `Math.pow(${a}, ${b})`,\n  },\n  protectedLog: {\n    function: protectedLog,\n    toCode: (a, b) => `protectedLog(${a}, ${b})`,\n    codeAddition: `const protectedLog = ${protectedLog.toString()}`,\n  },\n  sin: {\n    function: (a) => Math.sin(a),\n    toCode: (a) => `Math.sin(${a})`,\n  },\n  cos: {\n    function: (a) => Math.cos(a),\n    toCode: (a) => `Math.cos(${a})`,\n  },\n  sqrt: {\n    function: (a) => Math.sqrt(a),\n    toCode: (a) => `Math.sqrt(${a})`,\n  },\n  protectedSqrt: {\n    function: protectedSqrt,\n    toCode: (a, b) => `protectedSqrt(${a}, ${b})`,\n    codeAddition: `const protectedSqrt = ${protectedSqrt.toString()}`,\n  },\n  neg: {\n    function: (a) => -a,\n    toCode: (a) => `-${a}`,\n  },\n})\n\n","import {\n  getRandom,\n  mapSpecimenToStorable,\n  stringifySpecimen,\n  trueWithProbabilty,\n  sample,\n  tournament,\n  structuredClone,\n} from './util'\nimport functions from './functions'\nimport * as R from 'ramda'\nconst { specimenEvaluator } = require('./evaluate')\nconst { generateTree, mutate, crossover } = require('./treeGenerator')\nconst { assignFitness } = require('./fitness')\n\nexport default class Algorithm {\n  constructor() {\n    this.inputs = {}\n    this.running = false\n    this.mode = 'Fullnt'\n    this.reduxSetters = {}\n    this.functions = functions\n    this.functionsArray = Object.values(functions)\n    this.userSelectedFunctions = R.mergeAll(Object.keys(this.functions).map((e) => ({ [e]: true })))\n    this.evaluate = specimenEvaluator(functions)\n    this.currentGenerationNumber = 0\n    this.sortingFunction = (a, b) =>\n      isNaN(a.fitness)\n        ? 1\n        : isNaN(b.fitness)\n        ? -1\n        : a.fitness > b.fitness\n        ? 1\n        : b.fitness > a.fitness\n        ? -1\n        : a.subNodesCount > b.subNodesCount\n        ? 1\n        : b.subNodesCount > a.subNodesCount\n        ? -1\n        : 0\n  }\n\n  getUserSelectedFunctions() {\n    return this.userSelectedFunctions\n  }\n\n  setUserSelectedFunctions(functions) {\n    this.userSelectedFunctions = functions\n    this.functionsArray = Object.values(this.functions).filter((x) => functions[x.name])\n  }\n\n  setReduxSetters(setters) {\n    this.reduxSetters = { ...this.reduxSetters, ...setters }\n  }\n  setProperty(name, value) {\n    this[name] = value\n  }\n\n  parsePoints() {\n    this.points = this.pointsRaw.split('\\n').map((line) => {\n      const vars = line.split(',').map((e) => Number(e))\n      const xs = vars.slice(0, -1)\n      const y = vars.slice(-1)[0]\n\n      return {\n        ...xs.reduce((acc, x) => ({ value: { ...acc.value, [`x${acc.i}`]: x }, i: acc.i + 1 }), { value: {}, i: 0 })\n          .value,\n        y,\n      }\n    })\n  }\n\n  parseLeaves() {\n    const isRange = (e) => e.startsWith('(') && e.endsWith(')')\n    const fromInput = this.leavesRaw.split('\\n').map((line) => {\n      if (isRange(line)) {\n        const [min, max] = line\n          .slice(1, -1)\n          .split(',')\n          .map((e) => Number(e))\n        return () => getRandom(min, max)\n      } else {\n        return () => Number(line)\n      }\n    })\n    const fromPoints = Object.keys(this.points[0])\n      .filter((e) => e !== 'y')\n      .map((e) => {\n        return () => e\n      })\n    this.leavesFunctions = [...fromInput, ...fromPoints]\n  }\n\n  createGenerationZero() {\n    const generation = [...Array(this.populationSize).keys()].map(() =>\n      generateTree('', this.functionsArray, this.leavesFunctions, this.maxTreeDepth),\n    )\n    generation.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    generation.sort(this.sortingFunction)\n    this.generation = generation\n  }\n\n  // async asyncCrossover(i) {\n\n  // }\n\n  async generateNextGeneration() {\n    const newGeneration = [...Array(this.populationSize).keys()]\n    let i = 0\n    while (i < newGeneration.length) {\n      if (i < newGeneration.length - 1 && trueWithProbabilty(this.crossoverProbability)) {\n        const specimenArray1 = sample(this.generation, this.tournamentSize)\n        const specimenArray2 = sample(this.generation, this.tournamentSize)\n        const chosen1 = tournament(specimenArray1, this.tourmanentWinningProbability)\n        const chosen2 = tournament(specimenArray2, this.tourmanentWinningProbability)\n        const [a, b] = crossover(chosen1, chosen2)\n        newGeneration[i] = a\n        i++\n        newGeneration[i] = b\n        i++\n      } else {\n        const specimenArray = sample(this.generation, this.tournamentSize)\n        const chosen = tournament(specimenArray, this.tourmanentWinningProbability)\n        newGeneration[i] = mutate(chosen, this.mode, this.functionsArray, this.leavesFunctions, this.maxTreeDepth)\n        i++\n      }\n      if (i % 5000 === 0) {\n        console.log(i)\n      }\n    }\n\n    // await Promise.all(newGeneration.map((a) => new Promise(() => assignFitness(this.evaluate, this.points, a))))\n    newGeneration.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    newGeneration.sort(this.sortingFunction)\n    this.newGeneration = newGeneration\n  }\n\n  setBestSpecimensRedux() {\n    this.reduxSetters.setBestSpecimens(\n      this.generation.slice(0, 10).map((e) => mapSpecimenToStorable(e, this.functions)),\n    )\n  }\n\n  startAndCreateFirstGeneration() {\n    this.reduxSetters.setAlgorithmState('RUNNING')\n    this.parsePoints()\n    this.parseLeaves()\n    this.currentGenerationNumber = 1\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    this.createGenerationZero()\n    this.bestSpecimen = structuredClone(this.generation[0])\n    this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions))\n    this.setBestSpecimensRedux()\n  }\n\n  async createNextGeneration() {\n    this.currentGenerationNumber++\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    await this.generateNextGeneration()\n    this.generation = this.newGeneration\n\n    this.setBestSpecimensRedux()\n\n    const bestSpecimenThisGeneration = this.generation[0]\n    if (this.sortingFunction(this.bestSpecimen, bestSpecimenThisGeneration) === 1) {\n      this.bestSpecimen = structuredClone(bestSpecimenThisGeneration)\n      this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions))\n    }\n\n    console.log(stringifySpecimen(this.bestSpecimen), this.bestSpecimen.fitness)\n    if (this.currentGenerationNumber >= this.numberOfGenerations) this.reduxSetters.setAlgorithmState('FINISHED')\n  }\n  async runIfNotFinished() {\n    if (this.currentGenerationNumber >= this.numberOfGenerations) return true\n    if (this.currentGenerationNumber === 0) {\n      this.startAndCreateFirstGeneration()\n    } else {\n      await this.createNextGeneration()\n    }\n    return false\n  }\n}\n","import './App.css'\nimport Inputs from './inputs'\nimport Visuals from './visuals'\nimport Logic from './logic/Component'\nimport Algorithm from './logic/Algorithm'\nexport default function App() {\n  const algorithm = new Algorithm()\n  return (\n    <div className='App'>\n      <Inputs algorithm={algorithm}></Inputs>\n      <Visuals></Visuals>\n      <Logic algorithm={algorithm}></Logic>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const points = [...Array(20).keys()].map((a) => {\n  const x = a / 10\n  return {\n    x: x.toFixed(2),\n    y: (x * x - x).toFixed(2),\n  }\n})\n\nconst defaultState = {\n  problemType: 'real',\n  populationSize: 25000,\n  numberOfGenerations: 2,\n  maxTreeDepth: 6,\n  tournamentSize: 50,\n  tournamentWinningProbability: 0.5,\n  crossoverProbability: 0.5,\n  pointsRaw: points.map(({ x, y }) => `${x}, ${y}`).join('\\n'),\n  leavesRaw: ['1', '-1', '(-10,10)'].join('\\n'),\n  functions: {},\n  bestSpecimens: [],\n  bestSpecimen: null,\n  currentGeneration: '',\n  algorithmState: 'BEFORE_RUN',\n}\n\nexport const mainReducer = function (state = defaultState, action) {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      return state.algorithmState === 'RUNNING'\n        ? state\n        : {\n            ...state,\n            [action.field]: action.value,\n          }\n    case 'SET_FUNCTIONS':\n      return {\n        ...state,\n        functions: action.functions,\n      }\n    case 'SET_FUNCTION':\n      return {\n        ...state,\n        functions: {\n          ...state.functions,\n          [action.name]: action.value,\n        },\n      }\n    case 'SET_ALGORITHM_STATE':\n      return {\n        ...state,\n        algorithmState: action.value,\n      }\n    case 'SET_CURRENT_GENERATION':\n      return {\n        ...state,\n        currentGeneration: action.value,\n      }\n    case 'SET_BEST_SPECIMENS':\n      return {\n        ...state,\n        bestSpecimens: action.value,\n      }\n    case 'SET_BEST_SPECIMEN':\n      return {\n        ...state,\n        bestSpecimen: action.value,\n      }\n    default:\n      return state\n  }\n}\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { createStore } from 'redux'\nimport { mainReducer } from './reducers'\nimport { Provider } from 'react-redux'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\nconst store = createStore(mainReducer, composeWithDevTools())\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}