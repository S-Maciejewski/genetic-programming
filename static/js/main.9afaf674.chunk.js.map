{"version":3,"sources":["logic/util.js","logic/evaluate.js","logic/treeGenerator.js","logic/fitness.js","i18n.js","inputs.js","visuals.js","logic/Component.js","logic/functions.js","logic/Algorithm.js","App.js","reportWebVitals.js","reducers.js","index.js"],"names":["randomInt","range","Math","floor","random","randomIntInRange","min","max","trueWithProbabilty","probabilty","choose","choices","length","structuredClone","obj","JSON","parse","stringify","getRandom","sample","arr","size","indexes","Array","keys","map","sort","i","stringifyTleaf","specimen","value","Number","isInteger","toFixed","stringifySpecimen","type","name","children","join","chooseOne","array","tournamentSize","indexNormalised","tournament","specimenArray","tourmanentWinningProbability","specimenToCode","functions","inputVariables","codified","codify","childrenMapped","code","functionsUsed","toCode","e","reduce","x","y","Object","filter","codeAddition","mapSpecimenToStorable","function","fitness","specimenEvaluator","evaluator","variables","node","Tvalue","require","countSubNodes","subNodesCount","generateTree","mode","functionsMetaArray","leaves","maxLevel","currentLevel","generate","toLowerCase","chosen","arity","level","getNode","numberOfNode","parent","childNumber","child","mutate","newSpecimen","crossover","specimen1","specimen2","newSpecimen1","newSpecimen2","numberOfNodeToReplace1","numberOfNodeToReplace2","node1","childNumber1","node2","childNumber2","tmp","evaluate","points","point","module","exports","assignFitness","resources","en","translation","pl","i18n","init","lng","fallbackLng","keySeparator","interpolation","escapeValue","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","width","button","padding","Container","connect","state","problemType","populationSize","numberOfGenerations","maxTreeDepth","tournamentWinningProbability","crossoverProbability","pointsRaw","leavesRaw","algorithmState","currentGeneration","desiredGeneration","dispatch","setValue","field","setFunction","event","target","checked","resetAlgorithmState","setDesiredGeneration","algorithm","lang","useParams","changeLanguage","classes","useState","numberOfgeneraionsToRun","setNumberOfgeneraionsToRun","capitalise","toUpperCase","slice","createNextGenerationButtonFunction","useCallback","createNextGeneration","startAndCreateFirstGeneration","runButtonFunction","a","useEffect","setTimeout","document","title","t","className","noValidate","autoComplete","Grid","container","item","xs","Button","variant","color","onClick","TextField","label","onChange","InputLabelProps","shrink","stateField","id","disabled","multiline","rows","FormControl","component","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","key","Checkbox","table","generation","bestSpecimens","bestSpecimen","setCode","mapSpecimenToRow","row","TableRow","TableCell","scope","align","Typography","language","lineProps","style","wordBreak","whiteSpace","wrapLines","TableContainer","Paper","Table","TableHead","TableBody","setFunctions","setAlgorithmState","setCurrentGeneration","setBestSpecimens","setBestSpecimen","setProperty","setUserSelectedFunctions","getUserSelectedFunctions","console","log","setReduxSetters","protectedDivide","b","protectedLog","protectedSqrt","sqrt","abs","bitwiseXor","ifThenElse","c","addNameAndArity","R","v","k","add","onlyFor","subtract","multiply","divide","toString","exp","pow","sin","cos","neg","bitwiseOr","bitwiseAnd","or","and","xor","not","equalsNumeric","gtNumeric","ltNumeric","equals","gt","lt","Algorithm","this","running","reduxSetters","calculateUsableFuncitons","currentGenerationNumber","sortingFunction","isNaN","functionsArray","values","includes","userSelectedFunctions","setters","parseSinglePoint","real","integer","round","boolean","trim","split","line","vars","acc","fromInput","startsWith","endsWith","fromPoints","leavesFunctions","forEach","newGeneration","chosen1","chosen2","parsePoints","parseLeaves","createGenerationZero","setBestSpecimensRedux","generateNextGeneration","bestSpecimenThisGeneration","App","sm","md","lg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","exact","path","to","getElementById"],"mappings":"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","file":"static/js/main.9afaf674.chunk.js","sourcesContent":["export function randomInt(range) {\n  return Math.floor(Math.random() * range)\n}\n\nexport function randomIntInRange(min, max) {\n  return randomInt(max - min) + min\n}\n\nexport function trueWithProbabilty(probabilty) {\n  return Math.random() < probabilty\n}\n\nexport function choose(choices) {\n  const index = randomInt(choices.length)\n  return choices[index]\n}\n\nexport const structuredClone = (obj) => {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nexport function getRandom(min, max) {\n  return Math.random() * (max - min) + min\n}\n\nexport function sample(arr, size) {\n  const indexes = [...Array(size).keys()].map(() => randomInt(arr.length))\n  indexes.sort()\n  return indexes.map((i) => arr[i])\n}\n\nexport function stringifyTleaf(specimen) {\n  return specimen.value.length\n    ? specimen.value\n    : Number.isInteger(specimen.value)\n    ? specimen.value\n    : typeof specimen.value === 'boolean'\n    ? specimen.value\n    : specimen.value.toFixed(5)\n}\n\nexport function stringifySpecimen(specimen) {\n  return specimen.type === 'T'\n    ? `${stringifyTleaf(specimen)}`\n    : `${specimen.name}(${specimen.children ? specimen.children.map(stringifySpecimen).join(', ') : ''})`\n}\n\nexport function chooseOne(array, tournamentSize) {\n  const indexNormalised = Math.min(...[...Array(tournamentSize).keys()].map(() => Math.random()))\n  // console.log({indexNormalised})\n  return array[Math.floor(indexNormalised * array.length)]\n}\n\nexport function tournament(specimenArray, tourmanentWinningProbability) {\n  for (const specimen of specimenArray) {\n    if (trueWithProbabilty(tourmanentWinningProbability)) {\n      return specimen\n    }\n  }\n  return specimenArray[specimenArray.length - 1]\n}\n\nexport function specimenToCode(specimen, functions, inputVariables) {\n  function codify(specimen) {\n    const childrenMapped = specimen.children ? specimen.children.map(codify) : null\n    return specimen.type === 'T'\n      ? { code: `${stringifyTleaf(specimen)}`, functionsUsed: {} }\n      : {\n          code: functions[specimen.name].toCode(...childrenMapped.map((e) => e.code)),\n          functionsUsed: {\n            ...(childrenMapped ? childrenMapped.map((e) => e.functionsUsed) : []).reduce((x, y) => ({ ...x, ...y })),\n            [specimen.name]: 1,\n          },\n        }\n  }\n  const codified = codify(specimen)\n  // console.log(Object.keys(codified.functionsUsed))\n  // console.log(Object.keys(codified.functionsUsed).filter((e) => functions[e].codeAddition))\n  // console.log(\n  //   Object.keys(codified.functionsUsed)\n  //     .filter((e) => functions[e].codeAddition)\n  //     .map((e) => functions[e].codeAddition),\n  // )\n  return `const myFunction = (${inputVariables}) => ${codified.code}\\n${Object.keys(codified.functionsUsed)\n    .filter((e) => functions[e].codeAddition)\n    .map((e) => functions[e].codeAddition)\n    .join('\\n')}`\n}\n\nexport function mapSpecimenToStorable(e, functions, inputVariables) {\n  return {\n    function: stringifySpecimen(e),\n    fitness: e.fitness.toFixed(5),\n    code: specimenToCode(e, functions, inputVariables),\n  }\n}\n\n// module.exports = {\n//   getRandom,\n//   randomInt,\n//   trueWithProbabilty,\n//   choose,\n//   structuredClone,\n//   sample,\n//   stringifySpecimen,\n//   tournament,\n//   mapSpecimenToStorable,\n// }\n","export function specimenEvaluator(functions) {\n  function evaluator(variables, specimen) {\n    function Tvalue(node) {\n      return variables[node.value] ?? node.value\n    }\n    return specimen.type === 'F'\n      ? functions[specimen.name].function(...specimen.children.map((x) => evaluator(variables, x)))\n      : Tvalue(specimen)\n  }\n  return evaluator\n}\n","const { choose, structuredClone, randomInt } = require('./util')\n\nfunction countSubNodes(specimen) {\n  specimen.subNodesCount =\n    1 +\n    (!!specimen.children\n      ? specimen.children\n          .map((x) => {\n            countSubNodes(x)\n            return x.subNodesCount\n          })\n          .reduce((x, y) => x + y)\n      : 0)\n  return specimen\n}\nexport function generateTree(mode, functionsMetaArray, leaves, maxLevel, currentLevel = 1) {\n  function generate(currentLevel) {\n    const choices =\n      currentLevel === maxLevel\n        ? leaves\n        : mode.toLowerCase() === 'full' || currentLevel === 1\n        ? functionsMetaArray\n        : [...functionsMetaArray, ...leaves]\n    const chosen = choose(choices)\n    return !chosen.arity\n      ? {\n          type: 'T',\n          value: chosen(),\n          level: currentLevel,\n        }\n      : {\n          type: 'F',\n          name: chosen.name,\n          level: currentLevel,\n          children: [...Array(chosen.arity)].map(() => generate(currentLevel + 1)),\n        }\n  }\n  return countSubNodes(generate(currentLevel))\n}\nfunction getNode(specimen, numberOfNode, parent = null, childNumber = null) {\n  //              10\n  //         /         \\\n  //        5           9\n  //       / \\           \\\n  //      2   4           8\n  //    / \\    \\         / \\\n  //   0   1     3      6   7\n  if (numberOfNode === 0 && !specimen.children) {\n    return { node: parent, childNumber }\n  }\n  for (const childNumber in specimen.children) {\n    const child = specimen.children[childNumber]\n    if (numberOfNode < child.subNodesCount) {\n      return getNode(child, numberOfNode, specimen, childNumber)\n    } else {\n      numberOfNode -= child.subNodesCount\n    }\n  }\n  return { node: parent, childNumber }\n}\n\nexport function mutate(specimen, mode, functionsMetaArray, leaves, maxLevel) {\n  const newSpecimen = structuredClone(specimen)\n  const numberOfNodeToReplace = randomInt(newSpecimen.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace)\n  const { node, childNumber } = getNode(specimen, numberOfNodeToReplace)\n  //   console.log(stringifySpecimen(node))\n  //   console.log(childNumber)\n  node.children[childNumber] = generateTree(mode, functionsMetaArray, leaves, maxLevel, node.level + 1)\n  //   console.log(stringifySpecimen(node))\n  return countSubNodes(specimen)\n}\n\nexport function crossover(specimen1, specimen2) {\n  const newSpecimen1 = structuredClone(specimen1)\n  const newSpecimen2 = structuredClone(specimen2)\n  const numberOfNodeToReplace1 = randomInt(newSpecimen1.subNodesCount - 1)\n  const numberOfNodeToReplace2 = randomInt(newSpecimen2.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace1, numberOfNodeToReplace2)\n  const { node: node1, childNumber: childNumber1 } = getNode(newSpecimen1, numberOfNodeToReplace1)\n  const { node: node2, childNumber: childNumber2 } = getNode(newSpecimen2, numberOfNodeToReplace2)\n\n  const tmp = node1.children[childNumber1]\n  node1.children[childNumber1] = node2.children[childNumber2]\n  node2.children[childNumber2] = tmp\n\n  return [countSubNodes(newSpecimen1), countSubNodes(newSpecimen2)]\n}\n\n// module.exports = {\n//   generateTree,\n//   mutate,\n//   crossover,\n// }\n","function fitness(evaluate, points, specimen) {\n  return points\n    .map((point) => point.y - evaluate(point, specimen))\n    .map((x) => x * x)\n    .reduce((x, y) => x + y)\n}\n\nfunction assignFitness(evaluate, points, specimen) {\n  //   console.log({ specimen })\n  specimen.fitness = Number(fitness(evaluate, points, specimen).toFixed(5))\n  return specimen\n}\n\nmodule.exports = {\n  fitness,\n  assignFitness,\n}\n","import i18n from 'i18next'\n\nimport translationEN from './locales/en.json'\nimport translationPL from './locales/pl.json'\n\n// the translations\nconst resources = {\n  en: {\n    translation: translationEN,\n  },\n  pl: {\n    translation: translationPL,\n  },\n}\n\ni18n.init({\n  resources,\n  lng: 'en',\n  fallbackLng: 'en',\n  keySeparator: false, // we do not use keys in form messages.welcome\n\n  interpolation: {\n    escapeValue: false, // react already safes from xss\n  },\n})\n\nexport default i18n\n","import React, { useState, useEffect, useCallback } from 'react'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { connect } from 'react-redux'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Grid from '@material-ui/core/Grid'\n// import * as R from 'ramda'\nimport i18n from './i18n'\nimport { useParams } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n    button: {\n      padding: theme.spacing(3),\n      // textAlign: 'center',\n      // color: theme.palette.text.secondary,\n    },\n  },\n}))\n\nfunction Inputs({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setValue,\n  functions,\n  setFunction,\n  algorithmState,\n  resetAlgorithmState,\n  currentGeneration,\n  setDesiredGeneration,\n  desiredGeneration,\n}) {\n  const { lang } = useParams()\n  i18n.changeLanguage(lang)\n  const classes = useStyles()\n  const [numberOfgeneraionsToRun, setNumberOfgeneraionsToRun] = useState(5)\n  const capitalise = (e) => e[0].toUpperCase() + e.slice(1)\n\n  // const runButtonFunction = () => {\n  //   algorithm.startAndCreateFirstGeneration()\n\n  //   for (let i = 0; i < algorithm.numberOfGenerations - 1; i++) {\n  //     console.log('Generacja', i)\n  //     await algorithm.createNextGeneration()\n  //   }\n  // }\n\n  const createGenerationZeroButtonFunction = () => {\n    algorithm.startAndCreateFirstGeneration()\n  }\n\n  const createNextGenerationButtonFunction = useCallback(() => {\n    algorithmState !== 'BEFORE_RUN' ? algorithm.createNextGeneration() : algorithm.startAndCreateFirstGeneration()\n  }, [algorithm, algorithmState])\n\n  const runButtonFunction = async () => {\n    setDesiredGeneration(Number(currentGeneration) + Number(numberOfgeneraionsToRun))\n    createNextGenerationButtonFunction()\n  }\n  useEffect(() => {\n    setTimeout(() => {\n      if (Number(currentGeneration) < Number(desiredGeneration)) {\n        createNextGenerationButtonFunction()\n      }\n    }, 0)\n  }, [createNextGenerationButtonFunction, currentGeneration, desiredGeneration])\n  useEffect(() => {\n    document.title = i18n.t('title')\n  }, [])\n  return (\n    <form className={classes.root} noValidate autoComplete='off'>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Button\n            className={classes.button}\n            variant='contained'\n            color='primary'\n            onClick={createGenerationZeroButtonFunction}\n          >\n            {i18n.t('createFirstGeneration')}\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <Button\n            className={classes.button}\n            variant='contained'\n            color='primary'\n            onClick={createNextGenerationButtonFunction}\n            // disabled={algorithmState === 'BEFORE_RUN'}\n          >\n            {i18n.t('createNextGeneration')}\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <Button className={classes.button} variant='contained' color='primary' onClick={runButtonFunction}>\n            {i18n.t('runNGenerations')}\n          </Button>\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            // id={name}\n            // key={name}\n            // label={name.split('-').map(capitalise).join(' ')}\n            label={i18n.t('numberOfGenerationsToRun')}\n            type='number'\n            value={numberOfgeneraionsToRun}\n            onChange={(e) => setNumberOfgeneraionsToRun(e.target.value)}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant='outlined'\n            // disabled={algorithmState !== 'BEFORE_RUN'}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button className={classes.button} variant='contained' color='primary' onClick={resetAlgorithmState}>\n            Reset\n          </Button>\n        </Grid>\n        {/* <Button variant='contained' color='primary'>\n          Primary\n        </Button>\n        <Button variant='contained' color='primary'>\n          Primary\n        </Button> */}\n      </Grid>\n      <Grid container spacing={1}>\n        {[\n          { name: 'populationSize', value: populationSize, stateField: 'populationSize' },\n          // { name: 'number-of-generations', value: numberOfGenerations, stateField: 'numberOfGenerations' },\n          { name: 'maxTreeDepth', value: maxTreeDepth, stateField: 'maxTreeDepth' },\n          { name: 'tournamentSize', value: tournamentSize, stateField: 'tournamentSize' },\n          // {\n          //   name: 'tournament-winning-probability',\n          //   value: tournamentWinningProbability,\n          //   stateField: 'tournamentWinningProbability',\n          // },\n          { name: 'crossoverProbability', value: crossoverProbability, stateField: 'crossoverProbability' },\n        ].map(({ name, value, stateField }) => (\n          <Grid item xs={12}>\n            <TextField\n              id={name}\n              key={name}\n              label={i18n.t(name)}\n              type='number'\n              value={value}\n              onChange={(e) => setValue(stateField, Number(e.target.value))}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant='outlined'\n              disabled={algorithmState !== 'BEFORE_RUN'}\n            />\n          </Grid>\n        ))}\n        <Grid item xs={12}>\n          <TextField\n            id='points'\n            label={i18n.t('pointsWithInfo')}\n            multiline\n            rows={10}\n            value={pointsRaw}\n            variant='outlined'\n            onChange={(e) => setValue('pointsRaw', e.target.value)}\n            // disabled={algorithmState !== 'BEFORE_RUN'}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            id='leaves'\n            label={i18n.t('possibleLeaves')}\n            multiline\n            rows={10}\n            value={problemType === 'boolean' ? 'true, false' : leavesRaw}\n            variant='outlined'\n            onChange={(e) => setValue('leavesRaw', e.target.value)}\n            disabled={problemType === 'boolean'}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={12}>\n          <FormControl component='fieldset'>\n            <FormLabel component='legend'>{i18n.t('problemType')}</FormLabel>\n            <RadioGroup\n              aria-label='problem-type'\n              name='problem-type'\n              value={problemType}\n              onChange={(event) => setValue('problemType', event.target.value)}\n            >\n              {['real', 'integer', 'boolean'].map((e) => (\n                <FormControlLabel\n                  key={e}\n                  value={e}\n                  control={<Radio disabled={algorithmState !== 'BEFORE_RUN'} />}\n                  label={capitalise(i18n.t(e))}\n                />\n              ))}\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControl component='fieldset'>\n            {Object.keys(functions).map((key) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={functions[key]}\n                    name={key}\n                    key={key}\n                    onChange={(event) => {\n                      setFunction(event)\n                    }}\n                    disabled={algorithmState !== 'BEFORE_RUN'}\n                  />\n                }\n                label={key}\n              />\n            ))}\n          </FormControl>\n        </Grid>\n      </Grid>\n    </form>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n    currentGeneration,\n    desiredGeneration,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n    currentGeneration,\n    desiredGeneration,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n    resetAlgorithmState: () => dispatch({ type: 'SET_ALGORITHM_STATE', value: 'BEFORE_RUN' }),\n    setDesiredGeneration: (value) => dispatch({ type: 'SET_DESIRED_GENERAION', value }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Inputs)\nexport default Container\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { connect } from 'react-redux'\n// import Highlight from 'react-highlight.js'\nimport Button from '@material-ui/core/Button'\nimport { Typography } from '@material-ui/core'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport i18n from './i18n'\nconst useStyles = makeStyles({\n  table: {\n    // minWidth: 650,\n  },\n})\n\nfunction Visuals({ generation, bestSpecimens, bestSpecimen }) {\n  const classes = useStyles()\n  const [code, setCode] = useState(bestSpecimen?.code)\n  const mapSpecimenToRow = (row, i, title) => (\n    <TableRow key={i}>\n      <TableCell component='th' scope='row' align='right'>\n        {title || i + 1}\n      </TableCell>\n      <TableCell align='right'>\n        <Typography>{row.function}</Typography>\n      </TableCell>\n      <TableCell align='right'>{row.fitness}</TableCell>\n      <TableCell align='right'>\n        <Button variant='contained' color='primary' onClick={() => setCode(row.code)}>\n          {i18n.t('showCode')}\n        </Button>\n      </TableCell>\n    </TableRow>\n  )\n  return (\n    <>\n      <h1>{i18n.t(\"generation\")}: {generation}</h1>\n      {code || bestSpecimen?.code ? (\n        <>\n          <h2>Code:</h2>\n          <SyntaxHighlighter\n            language='javascript'\n            lineProps={{ style: { wordBreak: 'break-all', whiteSpace: 'pre-wrap' } }}\n            wrapLines={true}\n          >\n            {code || bestSpecimen?.code}\n          </SyntaxHighlighter>\n        </>\n      ) : (\n        <></>\n      )}\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label='simple table'>\n          {(bestSpecimen ? [bestSpecimen] : []).map((row, i) => mapSpecimenToRow(row, i, i18n.t('globalBest')))}\n          <TableHead>\n            <TableRow>\n              <TableCell align='right'>{i18n.t('number')}</TableCell>\n              <TableCell align='right'>{i18n.t('function')}</TableCell>\n              <TableCell align='right'>{i18n.t('errorSquared')}</TableCell>\n              <TableCell align='right'>{i18n.t('showCode')}</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{bestSpecimens.map((row, i) => mapSpecimenToRow(row, i))}</TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  )\n}\nconst mapStateToProps = (state) => {\n  const { currentGeneration, bestSpecimens, bestSpecimen } = state\n  return {\n    generation: currentGeneration,\n    bestSpecimens,\n    bestSpecimen,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    // setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Visuals)\nexport default Container\n","import React from 'react'\nimport { connect } from 'react-redux'\n// import * as R from 'ramda'\n\nfunction App({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setFunctions,\n  functions,\n  setAlgorithmState,\n  setCurrentGeneration,\n  setBestSpecimens,\n  setBestSpecimen,\n}) {\n  algorithm.setProperty('populationSize', Number(populationSize))\n  algorithm.setProperty('numberOfGenerations', Number(numberOfGenerations))\n  algorithm.setProperty('maxTreeDepth', Number(maxTreeDepth))\n  algorithm.setProperty('tournamentSize', Number(tournamentSize))\n  algorithm.setProperty('tournamentWinningProbability', Number(tournamentWinningProbability))\n  algorithm.setProperty('crossoverProbability', Number(crossoverProbability))\n  algorithm.setProperty('pointsRaw', pointsRaw)\n  algorithm.setProperty('leavesRaw', leavesRaw)\n  if (Object.keys(functions).length !== 0) {\n    algorithm.setUserSelectedFunctions(functions)\n  } else {\n    setFunctions(algorithm.getUserSelectedFunctions())\n  }\n  console.log(problemType, algorithm.problemType)\n  console.log(problemType !== algorithm.problemType)\n  if (problemType !== algorithm.problemType) {\n    algorithm.setProperty('problemType', problemType)\n    setFunctions(algorithm.getUserSelectedFunctions())\n  }\n\n  algorithm.setReduxSetters({ setAlgorithmState, setCurrentGeneration, setBestSpecimens, setBestSpecimen })\n  return <></>\n}\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setFunctions: (functions) => dispatch({ type: 'SET_FUNCTIONS', functions }),\n    setAlgorithmState: (value) => dispatch({ type: 'SET_ALGORITHM_STATE', value }),\n    setCurrentGeneration: (value) => dispatch({ type: 'SET_CURRENT_GENERATION', value }),\n    setBestSpecimens: (value) => dispatch({ type: 'SET_BEST_SPECIMENS', value }),\n    setBestSpecimen: (value) => dispatch({ type: 'SET_BEST_SPECIMEN', value }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App)\nexport default Container\n","import * as R from 'ramda'\n\nconst addNameAndArity = R.mapObjIndexed((v, k) => ({ ...v, name: k, arity: v.function.length }))\n\nconst protectedDivide = (a, b) => (b !== 0 ? a / b : a)\n\nconst protectedLog = (a, b) => (a > 0 && b > 0 && a !== 1 ? Math.log(b) / Math.log(a) : 0)\n\nconst protectedSqrt = (a) => Math.sqrt(Math.abs(a))\n\nconst bitwiseXor = (a,b) => (a && !b) || (!a && b)\n\nconst ifThenElse = (a,b,c) => a ? b : c\n\nexport default addNameAndArity({\n  add: {\n    function: (a, b) => a + b,\n    toCode: (a, b) => `(${a} + ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  subtract: {\n    function: (a, b) => a - b,\n    toCode: (a, b) => `(${a} - ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  multiply: {\n    function: (a, b) => a * b,\n    toCode: (a, b) => `${a} * ${b}`,\n    onlyFor: ['integer', 'real'],\n  },\n  divide: {\n    function: (a, b) => a / b,\n    toCode: (a, b) => `${a} / ${b}`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedDivide: {\n    function: protectedDivide,\n    toCode: (a, b) => `protectedDivide(${a}, ${b})`,\n    codeAddition: `const protectedDivide = ${protectedDivide.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  min: {\n    function: (a, b) => Math.min(a, b),\n    toCode: (a, b) => `Math.min(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  max: {\n    function: (a, b) => Math.max(a, b),\n    toCode: (a, b) => `Math.max(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  exp: {\n    function: (a) => Math.exp(a),\n    toCode: (a) => `Math.exp(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  pow: {\n    function: (a, b) => Math.pow(a, b),\n    toCode: (a, b) => `Math.pow(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  log: {\n    function: (a, b) => Math.log(b) / Math.log(a),\n    toCode: (a, b) => `Math.log(${b}) / Math.log(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedLog: {\n    function: protectedLog,\n    toCode: (a, b) => `protectedLog(${a}, ${b})`,\n    codeAddition: `const protectedLog = ${protectedLog.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  sin: {\n    function: (a) => Math.sin(a),\n    toCode: (a) => `Math.sin(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  cos: {\n    function: (a) => Math.cos(a),\n    toCode: (a) => `Math.cos(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  sqrt: {\n    function: (a) => Math.sqrt(a),\n    toCode: (a) => `Math.sqrt(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedSqrt: {\n    function: protectedSqrt,\n    toCode: (a) => `protectedSqrt(${a})`,\n    codeAddition: `const protectedSqrt = ${protectedSqrt.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  neg: {\n    function: (a) => -a,\n    toCode: (a) => `-${a}`,\n    onlyFor: ['integer', 'real'],\n  },\n  bitwiseOr: {\n    function: (a, b) => a | b,\n    toCode: (a, b) => `(${a} | ${b})`,\n    onlyFor: ['integer'],\n  },\n  bitwiseAnd: {\n    function: (a, b) => a & b,\n    toCode: (a, b) => `(${a} & ${b})`,\n    onlyFor: ['integer'],\n  },\n  bitwiseXor: {\n    function: (a, b) => a ^ b,\n    toCode: (a, b) => `(${a} ^ ${b})`,\n    onlyFor: ['integer'],\n  },\n  or: {\n    function: (a, b) => a | b,\n    toCode: (a, b) => `(${a} || ${b})`,\n    onlyFor: ['boolean'],\n  },\n  and: {\n    function: (a, b) => a && b,\n    toCode: (a, b) => `(${a} && ${b})`,\n    onlyFor: ['boolean'],\n  },\n  xor: {\n    function: bitwiseXor,\n    toCode: (a, b) => `bitwiseXor(${a}, ${b})`,\n    codeAddition: `const bitwiseXor = ${bitwiseXor.toString()}`,\n    onlyFor: ['boolean'],\n  },\n  ifThenElse: {\n    function: ifThenElse,\n    toCode: (a, b, c) => `ifThenElse(${a}, ${b}, ${c})`,\n    codeAddition: `const ifThenElse = ${ifThenElse.toString()}`,\n    onlyFor: ['boolean'],\n  },\n  not: {\n    function: (a) => !a,\n    toCode: (a) => `!(${a})`,\n    onlyFor: ['boolean'],\n  },\n  equalsNumeric: {\n    function: (a, b) => a === b ? 1 : 0,\n    toCode: (a, b) => `(${a} === ${b} ? 1 : 0)`,\n    onlyFor: ['integer', 'real'],\n  },\n  gtNumeric: {\n    function: (a, b) => a > b ? 1 : 0,\n    toCode: (a, b) => `(${a} > ${b} ? 1 : 0)`,\n    onlyFor: ['integer', 'real'],\n  },\n  ltNumeric: {\n    function: (a, b) => a > b ? 1 : 0,\n    toCode: (a, b) => `(${a} > ${b} ? 1 : 0)`,\n    onlyFor: ['integer', 'real'],\n  },\n  equals: {\n    function: (a, b) => a === b ? true : false,\n    toCode: (a, b) => `(${a} === ${b} ? true : false)`,\n    onlyFor: ['boolean'],\n  },\n  gt: {\n    function: (a, b) => a > b ? true : false,\n    toCode: (a, b) => `(${a} > ${b} ? true : false)`,\n    onlyFor: ['boolean'],\n  },\n  lt: {\n    function: (a, b) => a > b ? true : false,\n    toCode: (a, b) => `(${a} > ${b} ? true : false)`,\n    onlyFor: ['boolean'],\n  },\n})\n","import {\n  getRandom,\n  mapSpecimenToStorable,\n  // stringifySpecimen,\n  trueWithProbabilty,\n  // sample,\n  // tournament,\n  structuredClone,\n  chooseOne,\n  randomIntInRange,\n} from './util'\nimport functions from './functions'\nimport * as R from 'ramda'\nconst { specimenEvaluator } = require('./evaluate')\nconst { generateTree, mutate, crossover } = require('./treeGenerator')\nconst { assignFitness } = require('./fitness')\n\nexport default class Algorithm {\n  constructor() {\n    this.problemType = 'real'\n    this.running = false\n    this.mode = 'Fullnt'\n    this.reduxSetters = {}\n    this.functions = functions\n    this.inputVariables = []\n    this.calculateUsableFuncitons()\n    this.evaluate = specimenEvaluator(functions)\n    this.currentGenerationNumber = 0\n    console.log({ functions })\n    this.sortingFunction = (a, b) =>\n      isNaN(a.fitness)\n        ? 1\n        : isNaN(b.fitness)\n        ? -1\n        : a.fitness > b.fitness\n        ? 1\n        : b.fitness > a.fitness\n        ? -1\n        : a.subNodesCount > b.subNodesCount\n        ? 1\n        : b.subNodesCount > a.subNodesCount\n        ? -1\n        : 0\n  }\n\n  calculateUsableFuncitons() {\n    console.log(this.problemType)\n    this.functionsArray = Object.values(functions).filter(({ onlyFor }) => onlyFor.includes(this.problemType))\n    this.userSelectedFunctions = R.mergeAll(\n      Object.keys(this.functions)\n        .filter((e) => this.functions[e].onlyFor.includes(this.problemType))\n        .map((e) => ({ [e]: true })),\n    )\n    console.log('test:', this.userSelectedFunctions)\n    console.log(\n      R.mergeAll(\n        Object.keys(this.functions)\n          .filter((e) => this.functions[e].onlyFor.includes(this.problemType))\n          .map((e) => ({ [e]: true })),\n      ),\n    )\n  }\n\n  getUserSelectedFunctions() {\n    console.log(this.userSelectedFunctions)\n    return this.userSelectedFunctions\n  }\n\n  setUserSelectedFunctions(functions) {\n    this.userSelectedFunctions = R.mergeAll(\n      Object.keys(this.userSelectedFunctions).map((e) => ({ [e]: !!functions[e] })),\n    )\n    this.functionsArray = Object.values(this.functions).filter(\n      (x) => !!functions[x.name] && x.onlyFor.includes(this.problemType),\n    )\n  }\n\n  setReduxSetters(setters) {\n    this.reduxSetters = { ...this.reduxSetters, ...setters }\n  }\n\n  setProperty(name, value) {\n    this[name] = value\n    if (name === 'problemType') {\n      this.calculateUsableFuncitons()\n    }\n  }\n\n  parsePoints() {\n    const parseSinglePoint = {\n      real: (e) => Number(e),\n      integer: (e) => Math.round(Number(e)),\n      boolean: (e) => ['true', '1'].includes(e.trim().toLowerCase())\n    }[this.problemType]\n    this.points = this.pointsRaw.split('\\n').map((line) => {\n      const vars = line.split(',').map((e) => parseSinglePoint(e))\n      const xs = vars.slice(0, -1)\n      const y = vars.slice(-1)[0]\n      return {\n        ...xs.reduce((acc, x) => ({ value: { ...acc.value, [`x${acc.i}`]: x }, i: acc.i + 1 }), { value: {}, i: 0 })\n          .value,\n        y,\n      }\n    })\n    console.log({ points: this.points })\n  }\n\n  parseLeaves() {\n    const isRange = (e) => e.startsWith('(') && e.endsWith(')')\n    const fromInput =\n      this.problemType !== 'boolean'\n        ? this.leavesRaw.split('\\n').map((line) => {\n            if (isRange(line)) {\n              const [min, max] = line\n                .slice(1, -1)\n                .split(',')\n                .map((e) => Number(e))\n              return this.problemType === 'real' ? () => getRandom(min, max) : () => randomIntInRange(min, max)\n            } else {\n              return () => Number(line)\n            }\n          })\n        : [true, false].map((e) => () => e)\n    this.inputVariables = Object.keys(this.points[0]).filter((e) => e !== 'y')\n    const fromPoints = this.inputVariables.map((e) => {\n      return () => e\n    })\n\n    this.leavesFunctions = [...fromInput, ...fromPoints]\n  }\n\n  createGenerationZero() {\n    // console.log(this.inputs)\n    const generation = [...Array(this.populationSize).keys()].map(() =>\n      generateTree('', this.functionsArray, this.leavesFunctions, this.maxTreeDepth),\n    )\n    generation.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    generation.sort(this.sortingFunction)\n    this.generation = generation\n  }\n\n  // async asyncCrossover(i) {\n\n  // }\n\n  async generateNextGeneration() {\n    const newGeneration = [...Array(this.populationSize).keys()]\n    let i = 0\n    while (i < newGeneration.length) {\n      if (i < newGeneration.length - 1 && trueWithProbabilty(this.crossoverProbability)) {\n        const chosen1 = chooseOne(this.generation, this.tournamentSize)\n        // console.log({chosen1})\n        // console.log(stringifySpecimen(chosen1))\n        const chosen2 = chooseOne(this.generation, this.tournamentSize)\n        const [a, b] = crossover(chosen1, chosen2)\n        newGeneration[i] = a\n        i++\n        newGeneration[i] = b\n        i++\n      } else {\n        const chosen = chooseOne(this.generation, this.tournamentSize)\n        // console.log(stringifySpecimen(chosen))\n        newGeneration[i] = mutate(chosen, this.mode, this.functionsArray, this.leavesFunctions, this.maxTreeDepth)\n        i++\n      }\n      if (i % 5000 === 0) {\n        console.log(i)\n      }\n    }\n\n    // await Promise.all(newGeneration.map((a) => new Promise(() => assignFitness(this.evaluate, this.points, a))))\n    newGeneration.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    newGeneration.sort(this.sortingFunction)\n    this.newGeneration = newGeneration\n  }\n\n  setBestSpecimensRedux() {\n    this.reduxSetters.setBestSpecimens(\n      this.generation.slice(0, 10).map((e) => mapSpecimenToStorable(e, this.functions, this.inputVariables)),\n    )\n  }\n\n  startAndCreateFirstGeneration() {\n    this.reduxSetters.setAlgorithmState('RUNNING')\n    this.parsePoints()\n    this.parseLeaves()\n    this.currentGenerationNumber = 1\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    this.createGenerationZero()\n    this.bestSpecimen = structuredClone(this.generation[0])\n    this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions, this.inputVariables))\n    this.setBestSpecimensRedux()\n  }\n\n  async createNextGeneration() {\n    this.parsePoints()\n    this.parseLeaves()\n    this.currentGenerationNumber++\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    await this.generateNextGeneration()\n    this.generation = this.newGeneration\n\n    this.setBestSpecimensRedux()\n\n    const bestSpecimenThisGeneration = this.generation[0]\n    const isCurrentBestBetterThanGlobalbest = this.sortingFunction(this.bestSpecimen, bestSpecimenThisGeneration) === 1\n    if (isCurrentBestBetterThanGlobalbest) {\n      this.bestSpecimen = structuredClone(bestSpecimenThisGeneration)\n      this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions, this.inputVariables))\n    }\n\n    // console.log(stringifySpecimen(this.bestSpecimen), this.bestSpecimen.fitness)\n    // if (this.currentGenerationNumber >= this.numberOfGenerations) this.reduxSetters.setAlgorithmState('FINISHED')\n  }\n  async runIfNotFinished() {\n    this.parsePoints()\n    this.parseLeaves()\n    if (this.currentGenerationNumber >= this.numberOfGenerations) return true\n    if (this.currentGenerationNumber === 0) {\n      this.startAndCreateFirstGeneration()\n    } else {\n      await this.createNextGeneration()\n    }\n    return false\n  }\n}\n","import './App.css'\nimport Inputs from './inputs'\nimport Visuals from './visuals'\nimport Logic from './logic/Component'\nimport Algorithm from './logic/Algorithm'\nimport Grid from '@material-ui/core/Grid'\nexport default function App() {\n  const algorithm = new Algorithm()\n\n  return (\n    <div className='App'>\n      <Grid container>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <Inputs algorithm={algorithm}></Inputs>\n        </Grid>\n        <Grid item xs={12} sm={6} md={9} lg={10}>\n          <Visuals></Visuals>\n        </Grid>\n      </Grid>\n      <Logic algorithm={algorithm}></Logic>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const points = [...Array(20).keys()].map((a) => {\n  const x = a / 10\n  return {\n    x: x.toFixed(2),\n    y: (x * x - x).toFixed(2),\n  }\n})\n\nconst defaultState = {\n  problemType: 'real',\n  populationSize: 25000,\n  desiredGeneration: 0,\n  // numberOfGenerations: 2,\n  maxTreeDepth: 6,\n  tournamentSize: 50,\n  // tournamentWinningProbability: 0.5,\n  crossoverProbability: 0.5,\n  pointsRaw: points.map(({ x, y }) => `${x}, ${y}`).join('\\n'),\n  leavesRaw: ['1', '-1', '(-10,10)'].join('\\n'),\n  functions: {},\n  bestSpecimens: [],\n  bestSpecimen: null,\n  currentGeneration: '0',\n  algorithmState: 'BEFORE_RUN',\n}\n\nexport const mainReducer = function (state = defaultState, action) {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      return state.algorithmState === 'RUNNING'\n        ? state\n        : {\n            ...state,\n            [action.field]: action.value,\n          }\n    case 'SET_FUNCTIONS':\n      return {\n        ...state,\n        functions: action.functions,\n      }\n    case 'SET_FUNCTION':\n      return {\n        ...state,\n        functions: {\n          ...state.functions,\n          [action.name]: action.value,\n        },\n      }\n    case 'SET_ALGORITHM_STATE':\n      return {\n        ...state,\n        algorithmState: action.value,\n        desiredGeneration: action.value === 'BEFORE_RUN' ? 0 : state.desiredGeneration,\n      }\n    case 'SET_CURRENT_GENERATION':\n      return {\n        ...state,\n        currentGeneration: action.value,\n      }\n    case 'SET_BEST_SPECIMENS':\n      return {\n        ...state,\n        bestSpecimens: action.value,\n      }\n    case 'SET_BEST_SPECIMEN':\n      return {\n        ...state,\n        bestSpecimen: action.value,\n      }\n    case 'SET_DESIRED_GENERAION':\n      return {\n        ...state,\n        desiredGeneration: action.value,\n      }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { createStore } from 'redux'\nimport { mainReducer } from './reducers'\nimport { Provider } from 'react-redux'\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nconst store = createStore(mainReducer, composeWithDevTools())\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <Router>\n        <Switch>\n          <Route exact path='/genetic-programming'>\n            <Redirect to='/genetic-programming/en' />\n          </Route>\n          <Route path='/genetic-programming/:lang' children={<App />} />\n        </Switch>\n      </Router>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}