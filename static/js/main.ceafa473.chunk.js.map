{"version":3,"sources":["logic/util.js","logic/evaluate.js","logic/treeGenerator.js","logic/fitness.js","inputs.js","visuals.js","logic/Component.js","logic/functions.js","logic/Algorithm.js","App.js","reportWebVitals.js","reducers.js","index.js"],"names":["randomInt","range","Math","floor","random","randomIntInRange","min","max","trueWithProbabilty","probabilty","choose","choices","length","structuredClone","obj","JSON","parse","stringify","getRandom","sample","arr","size","indexes","Array","keys","map","sort","i","stringifyTleaf","specimen","value","Number","isInteger","toFixed","stringifySpecimen","type","name","children","join","chooseOne","array","tournamentSize","indexNormalised","tournament","specimenArray","tourmanentWinningProbability","specimenToCode","functions","inputVariables","codified","codify","childrenMapped","code","functionsUsed","toCode","e","reduce","x","y","Object","filter","codeAddition","mapSpecimenToStorable","function","fitness","specimenEvaluator","evaluator","variables","node","Tvalue","require","countSubNodes","subNodesCount","generateTree","mode","functionsMetaArray","leaves","maxLevel","currentLevel","generate","toLowerCase","chosen","arity","level","getNode","numberOfNode","parent","childNumber","child","mutate","newSpecimen","crossover","specimen1","specimen2","newSpecimen1","newSpecimen2","numberOfNodeToReplace1","numberOfNodeToReplace2","node1","childNumber1","node2","childNumber2","tmp","evaluate","points","point","module","exports","assignFitness","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","width","button","padding","Container","connect","state","problemType","populationSize","numberOfGenerations","maxTreeDepth","tournamentWinningProbability","crossoverProbability","pointsRaw","leavesRaw","algorithmState","currentGeneration","desiredGeneration","dispatch","setValue","field","setFunction","event","target","checked","resetAlgorithmState","setDesiredGeneration","algorithm","classes","useState","numberOfgeneraionsToRun","setNumberOfgeneraionsToRun","capitalise","toUpperCase","slice","createNextGenerationButtonFunction","useCallback","createNextGeneration","startAndCreateFirstGeneration","runButtonFunction","a","useEffect","setTimeout","className","noValidate","autoComplete","Grid","container","stateField","item","xs","sm","md","lg","TextField","id","label","split","onChange","InputLabelProps","shrink","variant","disabled","multiline","rows","FormControl","component","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","key","Checkbox","Button","color","onClick","table","generation","bestSpecimens","bestSpecimen","setCode","mapSpecimenToRow","row","title","TableRow","TableCell","scope","align","Typography","language","lineProps","style","wordBreak","whiteSpace","wrapLines","TableContainer","Paper","Table","TableHead","TableBody","setFunctions","setAlgorithmState","setCurrentGeneration","setBestSpecimens","setBestSpecimen","setProperty","setUserSelectedFunctions","getUserSelectedFunctions","console","log","setReduxSetters","protectedDivide","b","protectedLog","protectedSqrt","sqrt","abs","bitwiseXor","ifThenElse","c","addNameAndArity","R","v","k","add","onlyFor","subtract","multiply","divide","toString","exp","pow","sin","cos","neg","or","and","xor","bitwiseOr","bitwiseAnd","not","Algorithm","this","running","reduxSetters","calculateUsableFuncitons","currentGenerationNumber","sortingFunction","isNaN","functionsArray","values","includes","userSelectedFunctions","setters","parseSinglePoint","real","integer","round","boolean","trim","line","vars","acc","fromInput","startsWith","endsWith","fromPoints","leavesFunctions","forEach","newGeneration","chosen1","chosen2","parsePoints","parseLeaves","createGenerationZero","setBestSpecimensRedux","generateNextGeneration","bestSpecimenThisGeneration","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","store","createStore","action","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"guBAAO,SAASA,EAAUC,GACxB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAG7B,SAASI,EAAiBC,EAAKC,GACpC,OAAOP,EAAUO,EAAMD,GAAOA,EAGzB,SAASE,EAAmBC,GACjC,OAAOP,KAAKE,SAAWK,EAGlB,SAASC,EAAOC,GAErB,OAAOA,EADOX,EAAUW,EAAQC,SAI3B,IAAMC,EAAkB,SAACC,GAC9B,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,KAG5B,SAASI,EAAUZ,EAAKC,GAC7B,OAAOL,KAAKE,UAAYG,EAAMD,GAAOA,EAGhC,SAASa,EAAOC,EAAKC,GAC1B,IAAMC,EAAU,YAAIC,MAAMF,GAAMG,QAAQC,KAAI,kBAAMzB,EAAUoB,EAAIR,WAEhE,OADAU,EAAQI,OACDJ,EAAQG,KAAI,SAACE,GAAD,OAAOP,EAAIO,MAGzB,SAASC,EAAeC,GAC7B,OAAOA,EAASC,MAAMlB,QAElBmB,OAAOC,UAAUH,EAASC,QAEA,mBAAnBD,EAASC,MAHhBD,EAASC,MAKTD,EAASC,MAAMG,QAAQ,GAGtB,SAASC,EAAkBL,GAChC,MAAyB,MAAlBA,EAASM,KAAT,UACAP,EAAeC,IADf,UAEAA,EAASO,KAFT,YAEiBP,EAASQ,SAAWR,EAASQ,SAASZ,IAAIS,GAAmBI,KAAK,MAAQ,GAF3F,KAKF,SAASC,EAAUC,EAAOC,GAC/B,IAAMC,EAAkBxC,KAAKI,IAAL,MAAAJ,KAAI,YAAQ,YAAIqB,MAAMkB,GAAgBjB,QAAQC,KAAI,kBAAMvB,KAAKE,cAErF,OAAOoC,EAAMtC,KAAKC,MAAMuC,EAAkBF,EAAM5B,SAG3C,SAAS+B,EAAWC,EAAeC,GAA+B,IAAD,gBAC/CD,GAD+C,IACtE,2BAAsC,CAAC,IAA5Bf,EAA2B,QACpC,GAAIrB,EAAmBqC,GACrB,OAAOhB,GAH2D,8BAMtE,OAAOe,EAAcA,EAAchC,OAAS,GAGvC,SAASkC,EAAejB,EAAUkB,EAAWC,GAalD,IAAMC,EAZN,SAASC,EAAOrB,GAAW,IAAD,EAClBsB,EAAiBtB,EAASQ,SAAWR,EAASQ,SAASZ,IAAIyB,GAAU,KAC3E,MAAyB,MAAlBrB,EAASM,KACZ,CAAEiB,KAAK,GAAD,OAAKxB,EAAeC,IAAawB,cAAe,IACtD,CACED,MAAM,EAAAL,EAAUlB,EAASO,OAAMkB,OAAzB,oBAAmCH,EAAe1B,KAAI,SAAC8B,GAAD,OAAOA,EAAEH,UACrEC,cAAc,4BACRF,EAAiBA,EAAe1B,KAAI,SAAC8B,GAAD,OAAOA,EAAEF,iBAAiB,IAAIG,QAAO,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAMC,OADxF,kBAEV7B,EAASO,KAAO,KAIVc,CAAOrB,GAQxB,MAAM,uBAAN,OAA8BmB,EAA9B,gBAAoDC,EAASG,KAA7D,aAAsEO,OAAOnC,KAAKyB,EAASI,eACxFO,QAAO,SAACL,GAAD,OAAOR,EAAUQ,GAAGM,gBAC3BpC,KAAI,SAAC8B,GAAD,OAAOR,EAAUQ,GAAGM,gBACxBvB,KAAK,OAGH,SAASwB,EAAsBP,EAAGR,EAAWC,GAClD,MAAO,CACLe,SAAU7B,EAAkBqB,GAC5BS,QAAST,EAAES,QAAQ/B,QAAQ,GAC3BmB,KAAMN,EAAeS,EAAGR,EAAWC,M,sGC7FhC,SAASiB,EAAkBlB,GAShC,OARA,SAASmB,EAAUC,EAAWtC,GAAW,IAAD,EAItC,MAAyB,MAAlBA,EAASM,MACZ,EAAAY,EAAUlB,EAASO,OAAM2B,SAAzB,oBAAqClC,EAASQ,SAASZ,KAAI,SAACgC,GAAD,OAAOS,EAAUC,EAAWV,QAJ3F,SAAgBW,GAAO,IAAD,EACpB,iBAAOD,EAAUC,EAAKtC,cAAtB,QAAgCsC,EAAKtC,MAInCuC,CAAOxC,M,oLCPgCyC,EAAQ,IAA/C5D,E,EAAAA,OAAQG,E,EAAAA,gBAAiBb,E,EAAAA,UAEjC,SAASuE,EAAc1C,GAWrB,OAVAA,EAAS2C,cACP,GACG3C,EAASQ,SACRR,EAASQ,SACNZ,KAAI,SAACgC,GAEJ,OADAc,EAAcd,GACPA,EAAEe,iBAEVhB,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KACxB,GACC7B,EAEF,SAAS4C,EAAaC,EAAMC,EAAoBC,EAAQC,GAA6B,IAAnBC,EAAkB,uDAAH,EACtF,SAASC,EAASD,GAChB,IAAMnE,EACJmE,IAAiBD,EACbD,EACuB,SAAvBF,EAAKM,eAA6C,IAAjBF,EACjCH,EADA,sBAEIA,GAFJ,YAE2BC,IAC3BK,EAASvE,EAAOC,GACtB,OAAQsE,EAAOC,MAMX,CACE/C,KAAM,IACNC,KAAM6C,EAAO7C,KACb+C,MAAOL,EACPzC,SAAU,YAAId,MAAM0D,EAAOC,QAAQzD,KAAI,kBAAMsD,EAASD,EAAe,OATvE,CACE3C,KAAM,IACNL,MAAOmD,IACPE,MAAOL,GASf,OAAOP,EAAcQ,EAASD,IAEhC,SAASM,EAAQvD,EAAUwD,GAAkD,IAApCC,EAAmC,uDAA1B,KAAMC,EAAoB,uDAAN,KAQpE,GAAqB,IAAjBF,IAAuBxD,EAASQ,SAClC,MAAO,CAAE+B,KAAMkB,EAAQC,eAEzB,IAAK,IAAMA,KAAe1D,EAASQ,SAAU,CAC3C,IAAMmD,EAAQ3D,EAASQ,SAASkD,GAChC,GAAIF,EAAeG,EAAMhB,cACvB,OAAOY,EAAQI,EAAOH,EAAcxD,EAAU0D,GAE9CF,GAAgBG,EAAMhB,cAG1B,MAAO,CAAEJ,KAAMkB,EAAQC,eAGlB,SAASE,EAAO5D,EAAU6C,EAAMC,EAAoBC,EAAQC,GACjE,IAAMa,EAAc7E,EAAgBgB,GADuC,EAI7CuD,EAAQvD,EAFR7B,EAAU0F,EAAYlB,cAAgB,IAE5DJ,EAJmE,EAInEA,KAAMmB,EAJ6D,EAI7DA,YAKd,OAFAnB,EAAK/B,SAASkD,GAAed,EAAaC,EAAMC,EAAoBC,EAAQC,EAAUT,EAAKe,MAAQ,GAE5FZ,EAAc1C,GAGhB,SAAS8D,EAAUC,EAAWC,GACnC,IAAMC,EAAejF,EAAgB+E,GAC/BG,EAAelF,EAAgBgF,GAC/BG,EAAyBhG,EAAU8F,EAAatB,cAAgB,GAChEyB,EAAyBjG,EAAU+F,EAAavB,cAAgB,GAJxB,EAMKY,EAAQU,EAAcE,GAA3DE,EANgC,EAMtC9B,KAA0B+B,EANY,EAMzBZ,YANyB,EAOKH,EAAQW,EAAcE,GAA3DG,EAPgC,EAOtChC,KAA0BiC,EAPY,EAOzBd,YAEfe,EAAMJ,EAAM7D,SAAS8D,GAI3B,OAHAD,EAAM7D,SAAS8D,GAAgBC,EAAM/D,SAASgE,GAC9CD,EAAM/D,SAASgE,GAAgBC,EAExB,CAAC/B,EAAcuB,GAAevB,EAAcwB,M,kBCtFrD,SAAS/B,EAAQuC,EAAUC,EAAQ3E,GACjC,OAAO2E,EACJ/E,KAAI,SAACgF,GAAD,OAAWA,EAAM/C,EAAI6C,EAASE,EAAO5E,MACzCJ,KAAI,SAACgC,GAAD,OAAOA,EAAIA,KACfD,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAS1BgD,EAAOC,QAAU,CACf3C,UACA4C,cARF,SAAuBL,EAAUC,EAAQ3E,GAGvC,OADAA,EAASmC,QAAUjC,OAAOiC,EAAQuC,EAAUC,EAAQ3E,GAAUI,QAAQ,IAC/DJ,K,qOCGHgF,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,EACV,uBAAwB,CACtBC,OAAQH,EAAMI,QAAQ,GACtBC,MAAO,QAETC,OAAQ,CACNC,QAASP,EAAMI,QAAQ,SAyN7B,IA0CeI,EADGC,aAzCM,SAACC,GAgBvB,MAAO,CACLC,YAFED,EAbFC,YAgBAC,eAHEF,EAZFE,eAgBAC,oBAJEH,EAXFG,oBAgBAC,aALEJ,EAVFI,aAgBApF,eANEgF,EATFhF,eAgBAqF,6BAPEL,EARFK,6BAgBAC,qBAREN,EAPFM,qBAgBAC,UATEP,EANFO,UAgBAC,UAVER,EALFQ,UAgBAlF,UAXE0E,EAJF1E,UAgBAmF,eAZET,EAHFS,eAgBAC,kBAbEV,EAFFU,kBAgBAC,kBAdEX,EADFW,sBAmBuB,SAACC,GAC1B,MAAO,CACLC,SAAU,SAACC,EAAOzG,GAAR,OAAkBuG,EAAS,CAAElG,KAAM,eAAgBL,QAAOyG,WACpEC,YAAa,SAACC,GAAD,OAAWJ,EAAS,CAAElG,KAAM,eAAgBC,KAAMqG,EAAMC,OAAOtG,KAAMN,MAAO2G,EAAMC,OAAOC,WACtGC,oBAAqB,kBAAMP,EAAS,CAAElG,KAAM,sBAAuBL,MAAO,gBAC1E+G,qBAAsB,SAAC/G,GAAD,OAAWuG,EAAS,CAAElG,KAAM,wBAAyBL,cAG7D0F,EA3PlB,YAmBI,IAlBFsB,EAkBC,EAlBDA,UACApB,EAiBC,EAjBDA,YACAC,EAgBC,EAhBDA,eAEAE,GAcC,EAfDD,oBAeC,EAdDC,cACApF,EAaC,EAbDA,eAEAsF,GAWC,EAZDD,6BAYC,EAXDC,sBACAC,EAUC,EAVDA,UACAC,EASC,EATDA,UACAK,EAQC,EARDA,SACAvF,EAOC,EAPDA,UACAyF,EAMC,EANDA,YACAN,EAKC,EALDA,eACAU,EAIC,EAJDA,oBACAT,EAGC,EAHDA,kBACAU,EAEC,EAFDA,qBACAT,EACC,EADDA,kBAEMW,EAAUlC,IADf,EAE6DmC,mBAAS,GAFtE,mBAEMC,EAFN,KAE+BC,EAF/B,KAGKC,EAAa,SAAC5F,GAAD,OAAOA,EAAE,GAAG6F,cAAgB7F,EAAE8F,MAAM,IAejDC,EAAqCC,uBAAY,WAClC,eAAnBrB,EAAkCY,EAAUU,uBAAyBV,EAAUW,kCAC9E,CAACX,EAAWZ,IAETwB,EAAiB,uCAAG,sBAAAC,EAAA,sDACxBd,EAAqB9G,OAAOoG,GAAqBpG,OAAOkH,IACxDK,IAFwB,2CAAH,qDAYvB,OARAM,qBAAU,WACRC,YAAW,WACL9H,OAAOoG,GAAqBpG,OAAOqG,IACrCkB,MAED,KACF,CAACA,EAAoCnB,EAAmBC,IAGzD,uBAAM0B,UAAWf,EAAQ/B,KAAM+C,YAAU,EAACC,aAAa,MAAvD,UACE,eAACC,EAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,EAAzB,UACG,CACC,CAAE/E,KAAM,kBAAmBN,MAAO6F,EAAgBwC,WAAY,kBAE9D,CAAE/H,KAAM,iBAAkBN,MAAO+F,EAAcsC,WAAY,gBAC3D,CAAE/H,KAAM,kBAAmBN,MAAOW,EAAgB0H,WAAY,kBAM9D,CAAE/H,KAAM,uBAAwBN,MAAOiG,EAAsBoC,WAAY,yBACzE1I,KAAI,gBAAGW,EAAH,EAAGA,KAAMN,EAAT,EAASA,MAAOqI,EAAhB,EAAgBA,WAAhB,OACJ,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACC,EAAA,EAAD,CACEC,GAAItI,EAEJuI,MAAOvI,EAAKwI,MAAM,KAAKnJ,IAAI0H,GAAY7G,KAAK,KAC5CH,KAAK,SACLL,MAAOA,EACP+I,SAAU,SAACtH,GAAD,OAAO+E,EAAS6B,EAAYpI,OAAOwB,EAAEmF,OAAO5G,SACtDgJ,gBAAiB,CACfC,QAAQ,GAEVC,QAAQ,WACRC,SAA6B,eAAnB/C,GATL9F,QAaX,cAAC6H,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACC,EAAA,EAAD,CACEC,GAAG,SACHC,MAAM,4BACNO,WAAS,EACTC,KAAM,GACNrJ,MAAOkG,EACPgD,QAAQ,WACRH,SAAU,SAACtH,GAAD,OAAO+E,EAAS,YAAa/E,EAAEmF,OAAO5G,YAIpD,cAACmI,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACC,EAAA,EAAD,CACEC,GAAG,SACHC,MAAM,kBACNO,WAAS,EACTC,KAAM,GACNrJ,MAAuB,YAAhB4F,EAA4B,cAAgBO,EACnD+C,QAAQ,WACRH,SAAU,SAACtH,GAAD,OAAO+E,EAAS,YAAa/E,EAAEmF,OAAO5G,QAChDmJ,SAA0B,YAAhBvD,SAIhB,eAACuC,EAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,EAAzB,UACE,cAAC8C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,eAACc,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACE,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,0BACA,cAACE,EAAA,EAAD,CACEC,aAAW,eACXpJ,KAAK,eACLN,MAAO4F,EACPmD,SAAU,SAACpC,GAAD,OAAWH,EAAS,cAAeG,EAAMC,OAAO5G,QAJ5D,SAMG,CAAC,OAAQ,UAAW,WAAWL,KAAI,SAAC8B,GAAD,OAClC,cAACkI,EAAA,EAAD,CAEE3J,MAAOyB,EACPmI,QAAS,cAACC,EAAA,EAAD,CAAOV,SAA6B,eAAnB/C,IAC1ByC,MAAOxB,EAAW5F,IAHbA,aASf,cAAC0G,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACE,cAACc,EAAA,EAAD,CAAaC,UAAU,WAAvB,SACG1H,OAAOnC,KAAKuB,GAAWtB,KAAI,SAACmK,GAAD,OAC1B,cAACH,EAAA,EAAD,CACEC,QACE,cAACG,EAAA,EAAD,CACElD,QAAS5F,EAAU6I,GACnBxJ,KAAMwJ,EAENf,SAAU,SAACpC,GACTD,EAAYC,IAEdwC,SAA6B,eAAnB/C,GAJL0D,GAOTjB,MAAOiB,cAMjB,eAAC3B,EAAA,EAAD,CAAMC,WAAS,EAAC/C,QAAS,EAAzB,UACE,cAAC8C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACsB,EAAA,EAAD,CACEhC,UAAWf,EAAQ1B,OACnB2D,QAAQ,YACRe,MAAM,UACNC,QA5HiC,WACzClD,EAAUW,iCAuHJ,uCASF,cAACQ,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACsB,EAAA,EAAD,CACEhC,UAAWf,EAAQ1B,OACnB2D,QAAQ,YACRe,MAAM,UACNC,QAAS1C,EAJX,sCAUF,cAACW,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACsB,EAAA,EAAD,CAAQhC,UAAWf,EAAQ1B,OAAQ2D,QAAQ,YAAYe,MAAM,UAAUC,QAAStC,EAAhF,iCAIF,cAACO,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACC,EAAA,EAAD,CAIEE,MAAM,+BACNxI,KAAK,SACLL,MAAOmH,EACP4B,SAAU,SAACtH,GAAD,OAAO2F,EAA2B3F,EAAEmF,OAAO5G,QACrDgJ,gBAAiB,CACfC,QAAQ,GAEVC,QAAQ,eAIZ,cAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACE,cAACsB,EAAA,EAAD,CAAQhC,UAAWf,EAAQ1B,OAAQ2D,QAAQ,YAAYe,MAAM,UAAUC,QAASpD,EAAhF,8B,iFCjNJ/B,EAAYC,YAAW,CAC3BmF,MAAO,KA2DT,IAgBe1E,EADGC,aAfM,SAACC,GAEvB,MAAO,CACLyE,WAFyDzE,EAAnDU,kBAGNgE,cAHyD1E,EAAhC0E,cAIzBC,aAJyD3E,EAAjB2E,iBAQjB,SAAC/D,GAC1B,MAAO,KAKSb,EArElB,YAA+D,IAA5C0E,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,aACtCrD,EAAUlC,IAD4C,EAEpCmC,mBAAQ,OAACoD,QAAD,IAACA,OAAD,EAACA,EAAchJ,MAFa,mBAErDA,EAFqD,KAE/CiJ,EAF+C,KAGtDC,EAAmB,SAACC,EAAK5K,EAAG6K,GAAT,OACvB,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWrB,UAAU,KAAKsB,MAAM,MAAMC,MAAM,QAA5C,SACGJ,GAAS7K,EAAI,IAEhB,cAAC+K,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACE,cAACC,EAAA,EAAD,UAAaN,EAAIxI,aAEnB,cAAC2I,EAAA,EAAD,CAAWE,MAAM,QAAjB,SAA0BL,EAAIvI,UAC9B,cAAC0I,EAAA,EAAD,CAAWE,MAAM,QAAjB,SACE,cAACd,EAAA,EAAD,CAAQd,QAAQ,YAAYe,MAAM,UAAUC,QAAS,kBAAMK,EAAQE,EAAInJ,OAAvE,2BATWzB,IAejB,OACE,qCACE,8CAAiBuK,KAChB9I,IAAI,OAAIgJ,QAAJ,IAAIA,OAAJ,EAAIA,EAAchJ,MACrB,qCACE,uCACA,cAAC,IAAD,CACE0J,SAAS,aACTC,UAAW,CAAEC,MAAO,CAAEC,UAAW,YAAaC,WAAY,aAC1DC,WAAW,EAHb,SAKG/J,IAAI,OAAIgJ,QAAJ,IAAIA,OAAJ,EAAIA,EAAchJ,WAI3B,6BAGF,cAACgK,EAAA,EAAD,CAAgB/B,UAAWgC,IAA3B,SACE,eAACC,EAAA,EAAD,CAAOxD,UAAWf,EAAQkD,MAAOT,aAAW,eAA5C,WACIY,EAAe,CAACA,GAAgB,IAAI3K,KAAI,SAAC8K,EAAK5K,GAAN,OAAY2K,EAAiBC,EAAK5K,EAAG,kBAC/E,cAAC4L,EAAA,EAAD,UACE,eAACd,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWE,MAAM,QAAjB,oBACA,cAACF,EAAA,EAAD,CAAWE,MAAM,QAAjB,sBACA,cAACF,EAAA,EAAD,CAAWE,MAAM,QAAjB,2BACA,cAACF,EAAA,EAAD,CAAWE,MAAM,QAAjB,4BAGJ,cAACY,EAAA,EAAD,UAAYrB,EAAc1K,KAAI,SAAC8K,EAAK5K,GAAN,OAAY2K,EAAiBC,EAAK5K,mBCvB1E,IAqCe4F,EADGC,aApCM,SAACC,GAavB,MAAO,CACLC,YAFED,EAVFC,YAaAC,eAHEF,EATFE,eAaAC,oBAJEH,EARFG,oBAaAC,aALEJ,EAPFI,aAaApF,eANEgF,EANFhF,eAaAqF,6BAPEL,EALFK,6BAaAC,qBAREN,EAJFM,qBAaAC,UATEP,EAHFO,UAaAC,UAVER,EAFFQ,UAaAlF,UAXE0E,EADF1E,cAgBuB,SAACsF,GAC1B,MAAO,CACLoF,aAAc,SAAC1K,GAAD,OAAesF,EAAS,CAAElG,KAAM,gBAAiBY,eAC/D2K,kBAAmB,SAAC5L,GAAD,OAAWuG,EAAS,CAAElG,KAAM,sBAAuBL,WACtE6L,qBAAsB,SAAC7L,GAAD,OAAWuG,EAAS,CAAElG,KAAM,yBAA0BL,WAC5E8L,iBAAkB,SAAC9L,GAAD,OAAWuG,EAAS,CAAElG,KAAM,qBAAsBL,WACpE+L,gBAAiB,SAAC/L,GAAD,OAAWuG,EAAS,CAAElG,KAAM,oBAAqBL,cAGpD0F,EA7ElB,YAiBI,IAhBFsB,EAgBC,EAhBDA,UACApB,EAeC,EAfDA,YACAC,EAcC,EAdDA,eACAC,EAaC,EAbDA,oBACAC,EAYC,EAZDA,aACApF,EAWC,EAXDA,eACAqF,EAUC,EAVDA,6BACAC,EASC,EATDA,qBACAC,EAQC,EARDA,UACAC,EAOC,EAPDA,UACAwF,EAMC,EANDA,aACA1K,EAKC,EALDA,UACA2K,EAIC,EAJDA,kBACAC,EAGC,EAHDA,qBACAC,EAEC,EAFDA,iBACAC,EACC,EADDA,gBAuBA,OArBA/E,EAAUgF,YAAY,iBAAkB/L,OAAO4F,IAC/CmB,EAAUgF,YAAY,sBAAuB/L,OAAO6F,IACpDkB,EAAUgF,YAAY,eAAgB/L,OAAO8F,IAC7CiB,EAAUgF,YAAY,iBAAkB/L,OAAOU,IAC/CqG,EAAUgF,YAAY,+BAAgC/L,OAAO+F,IAC7DgB,EAAUgF,YAAY,uBAAwB/L,OAAOgG,IACrDe,EAAUgF,YAAY,YAAa9F,GACnCc,EAAUgF,YAAY,YAAa7F,GACG,IAAlCtE,OAAOnC,KAAKuB,GAAWnC,OACzBkI,EAAUiF,yBAAyBhL,GAEnC0K,EAAa3E,EAAUkF,4BAEzBC,QAAQC,IAAIxG,EAAaoB,EAAUpB,aACnCuG,QAAQC,IAAIxG,IAAgBoB,EAAUpB,aAClCA,IAAgBoB,EAAUpB,cAC5BoB,EAAUgF,YAAY,cAAepG,GACrC+F,EAAa3E,EAAUkF,6BAGzBlF,EAAUqF,gBAAgB,CAAET,oBAAmBC,uBAAsBC,mBAAkBC,oBAChF,gC,+CCvCHO,EAAkB,SAACzE,EAAG0E,GAAJ,OAAiB,IAANA,EAAU1E,EAAI0E,EAAI1E,GAE/C2E,EAAe,SAAC3E,EAAG0E,GAAJ,OAAW1E,EAAI,GAAK0E,EAAI,GAAW,IAAN1E,EAAUzJ,KAAKgO,IAAIG,GAAKnO,KAAKgO,IAAIvE,GAAK,GAElF4E,EAAgB,SAAC5E,GAAD,OAAOzJ,KAAKsO,KAAKtO,KAAKuO,IAAI9E,KAE1C+E,EAAa,SAAC/E,EAAE0E,GAAH,OAAU1E,IAAM0E,IAAQ1E,GAAK0E,GAE1CM,EAAa,SAAChF,EAAE0E,EAAEO,GAAL,OAAWjF,EAAI0E,EAAIO,GAEvBC,E,OAZSC,GAAgB,SAACC,EAAGC,GAAJ,mBAAC,eAAeD,GAAhB,IAAmB3M,KAAM4M,EAAG9J,MAAO6J,EAAEhL,SAASnD,WAYvEiO,CAAgB,CAC7BI,IAAK,CACHlL,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,iBAAc1E,EAAd,cAAqB0E,EAArB,MACRa,QAAS,CAAC,UAAW,SAEvBC,SAAU,CACRpL,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,iBAAc1E,EAAd,cAAqB0E,EAArB,MACRa,QAAS,CAAC,UAAW,SAEvBE,SAAU,CACRrL,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,gBAAa1E,EAAb,cAAoB0E,IAC5Ba,QAAS,CAAC,UAAW,SAEvBG,OAAQ,CACNtL,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,gBAAa1E,EAAb,cAAoB0E,IAC5Ba,QAAS,CAAC,UAAW,SAEvBd,gBAAiB,CACfrK,SAAUqK,EACV9K,OAAQ,SAACqG,EAAG0E,GAAJ,gCAA6B1E,EAA7B,aAAmC0E,EAAnC,MACRxK,aAAa,2BAAD,OAA6BuK,EAAgBkB,YACzDJ,QAAS,CAAC,UAAW,SAEvB5O,IAAK,CACHyD,SAAU,SAAC4F,EAAG0E,GAAJ,OAAUnO,KAAKI,IAAIqJ,EAAG0E,IAChC/K,OAAQ,SAACqG,EAAG0E,GAAJ,yBAAsB1E,EAAtB,aAA4B0E,EAA5B,MACRa,QAAS,CAAC,UAAW,SAEvB3O,IAAK,CACHwD,SAAU,SAAC4F,EAAG0E,GAAJ,OAAUnO,KAAKK,IAAIoJ,EAAG0E,IAChC/K,OAAQ,SAACqG,EAAG0E,GAAJ,yBAAsB1E,EAAtB,aAA4B0E,EAA5B,MACRa,QAAS,CAAC,UAAW,SAEvBK,IAAK,CACHxL,SAAU,SAAC4F,GAAD,OAAOzJ,KAAKqP,IAAI5F,IAC1BrG,OAAQ,SAACqG,GAAD,yBAAmBA,EAAnB,MACRuF,QAAS,CAAC,UAAW,SAEvBM,IAAK,CACHzL,SAAU,SAAC4F,EAAG0E,GAAJ,OAAUnO,KAAKsP,IAAI7F,EAAG0E,IAChC/K,OAAQ,SAACqG,EAAG0E,GAAJ,yBAAsB1E,EAAtB,aAA4B0E,EAA5B,MACRa,QAAS,CAAC,UAAW,SAEvBhB,IAAK,CACHnK,SAAU,SAAC4F,EAAG0E,GAAJ,OAAUnO,KAAKgO,IAAIG,GAAKnO,KAAKgO,IAAIvE,IAC3CrG,OAAQ,SAACqG,EAAG0E,GAAJ,yBAAsBA,EAAtB,wBAAuC1E,EAAvC,MACRuF,QAAS,CAAC,UAAW,SAEvBZ,aAAc,CACZvK,SAAUuK,EACVhL,OAAQ,SAACqG,EAAG0E,GAAJ,6BAA0B1E,EAA1B,aAAgC0E,EAAhC,MACRxK,aAAa,wBAAD,OAA0ByK,EAAagB,YACnDJ,QAAS,CAAC,UAAW,SAEvBO,IAAK,CACH1L,SAAU,SAAC4F,GAAD,OAAOzJ,KAAKuP,IAAI9F,IAC1BrG,OAAQ,SAACqG,GAAD,yBAAmBA,EAAnB,MACRuF,QAAS,CAAC,UAAW,SAEvBQ,IAAK,CACH3L,SAAU,SAAC4F,GAAD,OAAOzJ,KAAKwP,IAAI/F,IAC1BrG,OAAQ,SAACqG,GAAD,yBAAmBA,EAAnB,MACRuF,QAAS,CAAC,UAAW,SAEvBV,KAAM,CACJzK,SAAU,SAAC4F,GAAD,OAAOzJ,KAAKsO,KAAK7E,IAC3BrG,OAAQ,SAACqG,GAAD,0BAAoBA,EAApB,MACRuF,QAAS,CAAC,UAAW,SAEvBX,cAAe,CACbxK,SAAUwK,EACVjL,OAAQ,SAACqG,GAAD,8BAAwBA,EAAxB,MACR9F,aAAa,yBAAD,OAA2B0K,EAAce,YACrDJ,QAAS,CAAC,UAAW,SAEvBS,IAAK,CACH5L,SAAU,SAAC4F,GAAD,OAAQA,GAClBrG,OAAQ,SAACqG,GAAD,iBAAWA,IACnBuF,QAAS,CAAC,UAAW,SAEvBU,GAAI,CACF7L,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,iBAAc1E,EAAd,cAAqB0E,EAArB,MACRa,QAAS,CAAC,YAEZW,IAAK,CACH9L,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,iBAAc1E,EAAd,cAAqB0E,EAArB,MACRa,QAAS,CAAC,YAEZY,IAAK,CACH/L,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,iBAAc1E,EAAd,cAAqB0E,EAArB,MACRa,QAAS,CAAC,YAEZa,UAAW,CACThM,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,EAAI0E,GACxB/K,OAAQ,SAACqG,EAAG0E,GAAJ,iBAAc1E,EAAd,eAAsB0E,EAAtB,MACRa,QAAS,CAAC,YAEZc,WAAY,CACVjM,SAAU,SAAC4F,EAAG0E,GAAJ,OAAU1E,GAAK0E,GACzB/K,OAAQ,SAACqG,EAAG0E,GAAJ,iBAAc1E,EAAd,eAAsB0E,EAAtB,MACRa,QAAS,CAAC,YAEZR,WAAY,CACV3K,SAAU2K,EACVpL,OAAQ,SAACqG,EAAG0E,GAAJ,2BAAwB1E,EAAxB,aAA8B0E,EAA9B,MACRxK,aAAa,sBAAD,OAAwB6K,EAAWY,YAC/CJ,QAAS,CAAC,YAEZP,WAAY,CACV5K,SAAU4K,EACVrL,OAAQ,SAACqG,EAAG0E,EAAGO,GAAP,2BAA2BjF,EAA3B,aAAiC0E,EAAjC,aAAuCO,EAAvC,MACR/K,aAAa,sBAAD,OAAwB8K,EAAWW,YAC/CJ,QAAS,CAAC,YAEZe,IAAK,CACHlM,SAAU,SAAC4F,GAAD,OAAQA,GAClBrG,OAAQ,SAACqG,GAAD,kBAAYA,EAAZ,MACRuF,QAAS,CAAC,c,SC7HNjL,EAAsBK,EAAQ,KAA9BL,kB,EACoCK,EAAQ,KAA5CG,E,EAAAA,aAAcgB,E,EAAAA,OAAQE,G,EAAAA,UACtBiB,GAAkBtC,EAAQ,KAA1BsC,cAEasJ,G,WACnB,aAAe,oBACbC,KAAKzI,YAAc,OACnByI,KAAKC,SAAU,EACfD,KAAKzL,KAAO,SACZyL,KAAKE,aAAe,GACpBF,KAAKpN,UAAYA,EACjBoN,KAAKnN,eAAiB,GACtBmN,KAAKG,2BACLH,KAAK5J,SAAWtC,EAAkBlB,GAClCoN,KAAKI,wBAA0B,EAC/BtC,QAAQC,IAAI,CAAEnL,cACdoN,KAAKK,gBAAkB,SAAC7G,EAAG0E,GAAJ,OACrBoC,MAAM9G,EAAE3F,SACJ,EACAyM,MAAMpC,EAAErK,UACP,EACD2F,EAAE3F,QAAUqK,EAAErK,QACd,EACAqK,EAAErK,QAAU2F,EAAE3F,SACb,EACD2F,EAAEnF,cAAgB6J,EAAE7J,cACpB,EACA6J,EAAE7J,cAAgBmF,EAAEnF,eACnB,EACD,G,uEAGoB,IAAD,OACzByJ,QAAQC,IAAIiC,KAAKzI,aACjByI,KAAKO,eAAiB/M,OAAOgN,OAAO5N,GAAWa,QAAO,qBAAGsL,QAAsB0B,SAAS,EAAKlJ,gBAC7FyI,KAAKU,sBAAwB/B,IAC3BnL,OAAOnC,KAAK2O,KAAKpN,WACda,QAAO,SAACL,GAAD,OAAO,EAAKR,UAAUQ,GAAG2L,QAAQ0B,SAAS,EAAKlJ,gBACtDjG,KAAI,SAAC8B,GAAD,sBAAWA,GAAI,OAExB0K,QAAQC,IAAI,QAASiC,KAAKU,uBAC1B5C,QAAQC,IACNY,IACEnL,OAAOnC,KAAK2O,KAAKpN,WACda,QAAO,SAACL,GAAD,OAAO,EAAKR,UAAUQ,GAAG2L,QAAQ0B,SAAS,EAAKlJ,gBACtDjG,KAAI,SAAC8B,GAAD,sBAAWA,GAAI,U,iDAO1B,OADA0K,QAAQC,IAAIiC,KAAKU,uBACVV,KAAKU,wB,+CAGW9N,GAAY,IAAD,OAClCoN,KAAKU,sBAAwB/B,IAC3BnL,OAAOnC,KAAK2O,KAAKU,uBAAuBpP,KAAI,SAAC8B,GAAD,sBAAWA,IAAMR,EAAUQ,QAEzE4M,KAAKO,eAAiB/M,OAAOgN,OAAOR,KAAKpN,WAAWa,QAClD,SAACH,GAAD,QAASV,EAAUU,EAAErB,OAASqB,EAAEyL,QAAQ0B,SAAS,EAAKlJ,kB,sCAI1CoJ,GACdX,KAAKE,aAAL,2BAAyBF,KAAKE,cAAiBS,K,kCAGrC1O,EAAMN,GAChBqO,KAAK/N,GAAQN,EACA,gBAATM,GACF+N,KAAKG,6B,oCAKP,IAAMS,EAAmB,CACvBC,KAAM,SAACzN,GAAD,OAAOxB,OAAOwB,IACpB0N,QAAS,SAAC1N,GAAD,OAAOrD,KAAKgR,MAAMnP,OAAOwB,KAClC4N,QAAS,SAAC5N,GAAD,MAAO,CAAC,OAAQ,KAAKqN,SAASrN,EAAE6N,OAAOpM,iBAChDmL,KAAKzI,aACPyI,KAAK3J,OAAS2J,KAAKnI,UAAU4C,MAAM,MAAMnJ,KAAI,SAAC4P,GAC5C,IAAMC,EAAOD,EAAKzG,MAAM,KAAKnJ,KAAI,SAAC8B,GAAD,OAAOwN,EAAiBxN,MACnD8G,EAAKiH,EAAKjI,MAAM,GAAI,GACpB3F,EAAI4N,EAAKjI,OAAO,GAAG,GACzB,OAAO,2BACFgB,EAAG7G,QAAO,SAAC+N,EAAK9N,GAAN,MAAa,CAAE3B,MAAM,2BAAMyP,EAAIzP,OAAX,6BAAuByP,EAAI5P,GAAM8B,IAAK9B,EAAG4P,EAAI5P,EAAI,KAAM,CAAEG,MAAO,GAAIH,EAAG,IACrGG,OAFL,IAGE4B,SAGJuK,QAAQC,IAAI,CAAE1H,OAAQ2J,KAAK3J,W,oCAGd,IAAD,OAENgL,EACiB,YAArBrB,KAAKzI,YACDyI,KAAKlI,UAAU2C,MAAM,MAAMnJ,KAAI,SAAC4P,GAC9B,IAJS9N,EAIG8N,GAJKI,WAAW,MAAQlO,EAAEmO,SAAS,KAI5B,CAAC,IAAD,EACEL,EAChBhI,MAAM,GAAI,GACVuB,MAAM,KACNnJ,KAAI,SAAC8B,GAAD,OAAOxB,OAAOwB,MAJJ,mBACVjD,EADU,KACLC,EADK,KAKjB,MAA4B,SAArB,EAAKmH,YAAyB,kBAAMxG,oBAAUZ,EAAKC,IAAO,kBAAMF,2BAAiBC,EAAKC,IAE7F,OAAO,kBAAMwB,OAAOsP,IAXd,IAAC9N,KAcX,EAAC,GAAM,GAAO9B,KAAI,SAAC8B,GAAD,OAAO,kBAAMA,MACrC4M,KAAKnN,eAAiBW,OAAOnC,KAAK2O,KAAK3J,OAAO,IAAI5C,QAAO,SAACL,GAAD,MAAa,MAANA,KAChE,IAAMoO,EAAaxB,KAAKnN,eAAevB,KAAI,SAAC8B,GAC1C,OAAO,kBAAMA,MAGf4M,KAAKyB,gBAAL,sBAA2BJ,GAA3B,YAAyCG,M,6CAGnB,IAAD,OAEfzF,EAAa,YAAI3K,MAAM4O,KAAKxI,gBAAgBnG,QAAQC,KAAI,kBAC5DgD,EAAa,GAAI,EAAKiM,eAAgB,EAAKkB,gBAAiB,EAAK/J,iBAEnEqE,EAAW2F,SAAQ,SAAClI,GAAD,OAAO/C,GAAc,EAAKL,SAAU,EAAKC,OAAQmD,MACpEuC,EAAWxK,KAAKyO,KAAKK,iBACrBL,KAAKjE,WAAaA,I,sLAUlB,IAFM4F,E,YAAoBvQ,MAAM4O,KAAKxI,gBAAgBnG,QACjDG,EAAI,EACDA,EAAImQ,EAAclR,QACnBe,EAAImQ,EAAclR,OAAS,GAAKJ,6BAAmB2P,KAAKpI,uBACpDgK,EAAUxP,oBAAU4N,KAAKjE,WAAYiE,KAAK1N,gBAG1CuP,EAAUzP,oBAAU4N,KAAKjE,WAAYiE,KAAK1N,gBAJiC,EAKlEkD,GAAUoM,EAASC,GAL+C,mBAK1ErI,EAL0E,KAKvE0E,EALuE,KAMjFyD,EAAcnQ,GAAKgI,EACnBhI,IACAmQ,EAAcnQ,GAAK0M,EACnB1M,MAEMsD,EAAS1C,oBAAU4N,KAAKjE,WAAYiE,KAAK1N,gBAE/CqP,EAAcnQ,GAAK8D,EAAOR,EAAQkL,KAAKzL,KAAMyL,KAAKO,eAAgBP,KAAKyB,gBAAiBzB,KAAKtI,cAC7FlG,KAEEA,EAAI,MAAS,GACfsM,QAAQC,IAAIvM,GAKhBmQ,EAAcD,SAAQ,SAAClI,GAAD,OAAO/C,GAAc,EAAKL,SAAU,EAAKC,OAAQmD,MACvEmI,EAAcpQ,KAAKyO,KAAKK,iBACxBL,KAAK2B,cAAgBA,E,oJAGE,IAAD,OACtB3B,KAAKE,aAAazC,iBAChBuC,KAAKjE,WAAW7C,MAAM,EAAG,IAAI5H,KAAI,SAAC8B,GAAD,OAAOO,gCAAsBP,EAAG,EAAKR,UAAW,EAAKC,sB,sDAKxFmN,KAAKE,aAAa3C,kBAAkB,WACpCyC,KAAK8B,cACL9B,KAAK+B,cACL/B,KAAKI,wBAA0B,EAC/BJ,KAAKE,aAAa1C,qBAAqBwC,KAAKI,yBAC5CJ,KAAKgC,uBACLhC,KAAK/D,aAAevL,0BAAgBsP,KAAKjE,WAAW,IACpDiE,KAAKE,aAAaxC,gBAAgB/J,gCAAsBqM,KAAK/D,aAAc+D,KAAKpN,UAAWoN,KAAKnN,iBAChGmN,KAAKiC,0B,oKAILjC,KAAK8B,cACL9B,KAAK+B,cACL/B,KAAKI,0BACLJ,KAAKE,aAAa1C,qBAAqBwC,KAAKI,yB,SACtCJ,KAAKkC,yB,OACXlC,KAAKjE,WAAaiE,KAAK2B,cAEvB3B,KAAKiC,wBAECE,EAA6BnC,KAAKjE,WAAW,GAC+D,IAAxEiE,KAAKK,gBAAgBL,KAAK/D,aAAckG,KAEhFnC,KAAK/D,aAAevL,0BAAgByR,GACpCnC,KAAKE,aAAaxC,gBAAgB/J,gCAAsBqM,KAAK/D,aAAc+D,KAAKpN,UAAWoN,KAAKnN,kB,6PAOlGmN,KAAK8B,cACL9B,KAAK+B,gBACD/B,KAAKI,yBAA2BJ,KAAKvI,qB,0CAA4B,G,UAChC,IAAjCuI,KAAKI,wB,gBACPJ,KAAK1G,gC,wCAEC0G,KAAK3G,uB,kCAEN,G,8GC1NI,SAAS+I,KACtB,IAAMzJ,EAAY,IAAIoH,GACtB,OACE,sBAAKpG,UAAU,MAAf,UACE,cAAC,EAAD,CAAQhB,UAAWA,IACnB,cAAC,EAAD,IACA,cAAC,EAAD,CAAOA,UAAWA,OCXxB,IAYe0J,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCCRQ,GAAe,CACnBvL,YAAa,OACbC,eAAgB,KAChBS,kBAAmB,EAEnBP,aAAc,EACdpF,eAAgB,GAEhBsF,qBAAsB,GACtBC,UAjBa,YAAIzG,MAAM,IAAIC,QAAQC,KAAI,SAACkI,GACxC,IAAMlG,EAAIkG,EAAI,GACd,MAAO,CACLlG,EAAGA,EAAExB,QAAQ,GACbyB,GAAID,EAAIA,EAAIA,GAAGxB,QAAQ,OAaPR,KAAI,gBAAGgC,EAAH,EAAGA,EAAGC,EAAN,EAAMA,EAAN,gBAAiBD,EAAjB,aAAuBC,MAAKpB,KAAK,MACvD2F,UAAW,CAAC,IAAK,KAAM,YAAY3F,KAAK,MACxCS,UAAW,GACXoJ,cAAe,GACfC,aAAc,KACdjE,kBAAmB,IACnBD,eAAgB,c,SCbZgL,GAAQC,wBDgBa,WAAyC,IAA/B1L,EAA8B,uDAAtBwL,GAAcG,EAAQ,uCACjE,OAAQA,EAAOjR,MACb,IAAK,eACH,MAAgC,YAAzBsF,EAAMS,eACTT,EADG,2BAGEA,GAHF,kBAIA2L,EAAO7K,MAAQ6K,EAAOtR,QAE/B,IAAK,gBACH,OAAO,2BACF2F,GADL,IAEE1E,UAAWqQ,EAAOrQ,YAEtB,IAAK,eACH,OAAO,2BACF0E,GADL,IAEE1E,UAAU,2BACL0E,EAAM1E,WADF,kBAENqQ,EAAOhR,KAAOgR,EAAOtR,UAG5B,IAAK,sBACH,OAAO,2BACF2F,GADL,IAEES,eAAgBkL,EAAOtR,MACvBsG,kBAAoC,eAAjBgL,EAAOtR,MAAyB,EAAI2F,EAAMW,oBAEjE,IAAK,yBACH,OAAO,2BACFX,GADL,IAEEU,kBAAmBiL,EAAOtR,QAE9B,IAAK,qBACH,OAAO,2BACF2F,GADL,IAEE0E,cAAeiH,EAAOtR,QAE1B,IAAK,oBACH,OAAO,2BACF2F,GADL,IAEE2E,aAAcgH,EAAOtR,QAEzB,IAAK,wBACH,OAAO,2BACF2F,GADL,IAEEW,kBAAmBgL,EAAOtR,QAE9B,QACE,OAAO2F,KCjE0B4L,kCAEvCC,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,IAAMM,WAAP,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.ceafa473.chunk.js","sourcesContent":["export function randomInt(range) {\n  return Math.floor(Math.random() * range)\n}\n\nexport function randomIntInRange(min, max) {\n  return randomInt(max - min) + min\n}\n\nexport function trueWithProbabilty(probabilty) {\n  return Math.random() < probabilty\n}\n\nexport function choose(choices) {\n  const index = randomInt(choices.length)\n  return choices[index]\n}\n\nexport const structuredClone = (obj) => {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nexport function getRandom(min, max) {\n  return Math.random() * (max - min) + min\n}\n\nexport function sample(arr, size) {\n  const indexes = [...Array(size).keys()].map(() => randomInt(arr.length))\n  indexes.sort()\n  return indexes.map((i) => arr[i])\n}\n\nexport function stringifyTleaf(specimen) {\n  return specimen.value.length\n    ? specimen.value\n    : Number.isInteger(specimen.value)\n    ? specimen.value\n    : typeof specimen.value === 'boolean'\n    ? specimen.value\n    : specimen.value.toFixed(5)\n}\n\nexport function stringifySpecimen(specimen) {\n  return specimen.type === 'T'\n    ? `${stringifyTleaf(specimen)}`\n    : `${specimen.name}(${specimen.children ? specimen.children.map(stringifySpecimen).join(', ') : ''})`\n}\n\nexport function chooseOne(array, tournamentSize) {\n  const indexNormalised = Math.min(...[...Array(tournamentSize).keys()].map(() => Math.random()))\n  // console.log({indexNormalised})\n  return array[Math.floor(indexNormalised * array.length)]\n}\n\nexport function tournament(specimenArray, tourmanentWinningProbability) {\n  for (const specimen of specimenArray) {\n    if (trueWithProbabilty(tourmanentWinningProbability)) {\n      return specimen\n    }\n  }\n  return specimenArray[specimenArray.length - 1]\n}\n\nexport function specimenToCode(specimen, functions, inputVariables) {\n  function codify(specimen) {\n    const childrenMapped = specimen.children ? specimen.children.map(codify) : null\n    return specimen.type === 'T'\n      ? { code: `${stringifyTleaf(specimen)}`, functionsUsed: {} }\n      : {\n          code: functions[specimen.name].toCode(...childrenMapped.map((e) => e.code)),\n          functionsUsed: {\n            ...(childrenMapped ? childrenMapped.map((e) => e.functionsUsed) : []).reduce((x, y) => ({ ...x, ...y })),\n            [specimen.name]: 1,\n          },\n        }\n  }\n  const codified = codify(specimen)\n  // console.log(Object.keys(codified.functionsUsed))\n  // console.log(Object.keys(codified.functionsUsed).filter((e) => functions[e].codeAddition))\n  // console.log(\n  //   Object.keys(codified.functionsUsed)\n  //     .filter((e) => functions[e].codeAddition)\n  //     .map((e) => functions[e].codeAddition),\n  // )\n  return `const myFunction = (${inputVariables}) => ${codified.code}\\n${Object.keys(codified.functionsUsed)\n    .filter((e) => functions[e].codeAddition)\n    .map((e) => functions[e].codeAddition)\n    .join('\\n')}`\n}\n\nexport function mapSpecimenToStorable(e, functions, inputVariables) {\n  return {\n    function: stringifySpecimen(e),\n    fitness: e.fitness.toFixed(5),\n    code: specimenToCode(e, functions, inputVariables),\n  }\n}\n\n// module.exports = {\n//   getRandom,\n//   randomInt,\n//   trueWithProbabilty,\n//   choose,\n//   structuredClone,\n//   sample,\n//   stringifySpecimen,\n//   tournament,\n//   mapSpecimenToStorable,\n// }\n","export function specimenEvaluator(functions) {\n  function evaluator(variables, specimen) {\n    function Tvalue(node) {\n      return variables[node.value] ?? node.value\n    }\n    return specimen.type === 'F'\n      ? functions[specimen.name].function(...specimen.children.map((x) => evaluator(variables, x)))\n      : Tvalue(specimen)\n  }\n  return evaluator\n}\n","const { choose, structuredClone, randomInt } = require('./util')\n\nfunction countSubNodes(specimen) {\n  specimen.subNodesCount =\n    1 +\n    (!!specimen.children\n      ? specimen.children\n          .map((x) => {\n            countSubNodes(x)\n            return x.subNodesCount\n          })\n          .reduce((x, y) => x + y)\n      : 0)\n  return specimen\n}\nexport function generateTree(mode, functionsMetaArray, leaves, maxLevel, currentLevel = 1) {\n  function generate(currentLevel) {\n    const choices =\n      currentLevel === maxLevel\n        ? leaves\n        : mode.toLowerCase() === 'full' || currentLevel === 1\n        ? functionsMetaArray\n        : [...functionsMetaArray, ...leaves]\n    const chosen = choose(choices)\n    return !chosen.arity\n      ? {\n          type: 'T',\n          value: chosen(),\n          level: currentLevel,\n        }\n      : {\n          type: 'F',\n          name: chosen.name,\n          level: currentLevel,\n          children: [...Array(chosen.arity)].map(() => generate(currentLevel + 1)),\n        }\n  }\n  return countSubNodes(generate(currentLevel))\n}\nfunction getNode(specimen, numberOfNode, parent = null, childNumber = null) {\n  //              10\n  //         /         \\\n  //        5           9\n  //       / \\           \\\n  //      2   4           8\n  //    / \\    \\         / \\\n  //   0   1     3      6   7\n  if (numberOfNode === 0 && !specimen.children) {\n    return { node: parent, childNumber }\n  }\n  for (const childNumber in specimen.children) {\n    const child = specimen.children[childNumber]\n    if (numberOfNode < child.subNodesCount) {\n      return getNode(child, numberOfNode, specimen, childNumber)\n    } else {\n      numberOfNode -= child.subNodesCount\n    }\n  }\n  return { node: parent, childNumber }\n}\n\nexport function mutate(specimen, mode, functionsMetaArray, leaves, maxLevel) {\n  const newSpecimen = structuredClone(specimen)\n  const numberOfNodeToReplace = randomInt(newSpecimen.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace)\n  const { node, childNumber } = getNode(specimen, numberOfNodeToReplace)\n  //   console.log(stringifySpecimen(node))\n  //   console.log(childNumber)\n  node.children[childNumber] = generateTree(mode, functionsMetaArray, leaves, maxLevel, node.level + 1)\n  //   console.log(stringifySpecimen(node))\n  return countSubNodes(specimen)\n}\n\nexport function crossover(specimen1, specimen2) {\n  const newSpecimen1 = structuredClone(specimen1)\n  const newSpecimen2 = structuredClone(specimen2)\n  const numberOfNodeToReplace1 = randomInt(newSpecimen1.subNodesCount - 1)\n  const numberOfNodeToReplace2 = randomInt(newSpecimen2.subNodesCount - 1)\n  //   console.log('numberOfNodeToReplace', numberOfNodeToReplace1, numberOfNodeToReplace2)\n  const { node: node1, childNumber: childNumber1 } = getNode(newSpecimen1, numberOfNodeToReplace1)\n  const { node: node2, childNumber: childNumber2 } = getNode(newSpecimen2, numberOfNodeToReplace2)\n\n  const tmp = node1.children[childNumber1]\n  node1.children[childNumber1] = node2.children[childNumber2]\n  node2.children[childNumber2] = tmp\n\n  return [countSubNodes(newSpecimen1), countSubNodes(newSpecimen2)]\n}\n\n// module.exports = {\n//   generateTree,\n//   mutate,\n//   crossover,\n// }\n","function fitness(evaluate, points, specimen) {\n  return points\n    .map((point) => point.y - evaluate(point, specimen))\n    .map((x) => x * x)\n    .reduce((x, y) => x + y)\n}\n\nfunction assignFitness(evaluate, points, specimen) {\n  //   console.log({ specimen })\n  specimen.fitness = Number(fitness(evaluate, points, specimen).toFixed(5))\n  return specimen\n}\n\nmodule.exports = {\n  fitness,\n  assignFitness,\n}\n","import React, { useState, useEffect, useCallback } from 'react'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { connect } from 'react-redux'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Grid from '@material-ui/core/Grid'\n// import * as R from 'ramda'\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n    button: {\n      padding: theme.spacing(3),\n      // textAlign: 'center',\n      // color: theme.palette.text.secondary,\n    },\n  },\n}))\n\nfunction Inputs({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setValue,\n  functions,\n  setFunction,\n  algorithmState,\n  resetAlgorithmState,\n  currentGeneration,\n  setDesiredGeneration,\n  desiredGeneration,\n}) {\n  const classes = useStyles()\n  const [numberOfgeneraionsToRun, setNumberOfgeneraionsToRun] = useState(5)\n  const capitalise = (e) => e[0].toUpperCase() + e.slice(1)\n\n  // const runButtonFunction = () => {\n  //   algorithm.startAndCreateFirstGeneration()\n\n  //   for (let i = 0; i < algorithm.numberOfGenerations - 1; i++) {\n  //     console.log('Generacja', i)\n  //     await algorithm.createNextGeneration()\n  //   }\n  // }\n\n  const createGenerationZeroButtonFunction = () => {\n    algorithm.startAndCreateFirstGeneration()\n  }\n\n  const createNextGenerationButtonFunction = useCallback(() => {\n    algorithmState !== 'BEFORE_RUN' ? algorithm.createNextGeneration() : algorithm.startAndCreateFirstGeneration()\n  }, [algorithm, algorithmState])\n\n  const runButtonFunction = async () => {\n    setDesiredGeneration(Number(currentGeneration) + Number(numberOfgeneraionsToRun))\n    createNextGenerationButtonFunction()\n  }\n  useEffect(() => {\n    setTimeout(() => {\n      if (Number(currentGeneration) < Number(desiredGeneration)) {\n        createNextGenerationButtonFunction()\n      }\n    }, 0)\n  }, [createNextGenerationButtonFunction, currentGeneration, desiredGeneration])\n\n  return (\n    <form className={classes.root} noValidate autoComplete='off'>\n      <Grid container spacing={1}>\n        {[\n          { name: 'population-size', value: populationSize, stateField: 'populationSize' },\n          // { name: 'number-of-generations', value: numberOfGenerations, stateField: 'numberOfGenerations' },\n          { name: 'max-tree-depth', value: maxTreeDepth, stateField: 'maxTreeDepth' },\n          { name: 'tournament-size', value: tournamentSize, stateField: 'tournamentSize' },\n          // {\n          //   name: 'tournament-winning-probability',\n          //   value: tournamentWinningProbability,\n          //   stateField: 'tournamentWinningProbability',\n          // },\n          { name: 'crossover-probabilty', value: crossoverProbability, stateField: 'crossoverProbability' },\n        ].map(({ name, value, stateField }) => (\n          <Grid item xs={12} sm={6} md={3} lg={2}>\n            <TextField\n              id={name}\n              key={name}\n              label={name.split('-').map(capitalise).join(' ')}\n              type='number'\n              value={value}\n              onChange={(e) => setValue(stateField, Number(e.target.value))}\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant='outlined'\n              disabled={algorithmState !== 'BEFORE_RUN'}\n            />\n          </Grid>\n        ))}\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <TextField\n            id='points'\n            label='Points (last column is y)'\n            multiline\n            rows={10}\n            value={pointsRaw}\n            variant='outlined'\n            onChange={(e) => setValue('pointsRaw', e.target.value)}\n            // disabled={algorithmState !== 'BEFORE_RUN'}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <TextField\n            id='leaves'\n            label='Possible leaves'\n            multiline\n            rows={10}\n            value={problemType === 'boolean' ? 'true, false' : leavesRaw}\n            variant='outlined'\n            onChange={(e) => setValue('leavesRaw', e.target.value)}\n            disabled={problemType === 'boolean'}\n          />\n        </Grid>\n      </Grid>\n      <Grid container spacing={1}>\n        <Grid item xs={12} sm={6}>\n          <FormControl component='fieldset'>\n            <FormLabel component='legend'>Problem type</FormLabel>\n            <RadioGroup\n              aria-label='problem-type'\n              name='problem-type'\n              value={problemType}\n              onChange={(event) => setValue('problemType', event.target.value)}\n            >\n              {['real', 'integer', 'boolean'].map((e) => (\n                <FormControlLabel\n                  key={e}\n                  value={e}\n                  control={<Radio disabled={algorithmState !== 'BEFORE_RUN'} />}\n                  label={capitalise(e)}\n                />\n              ))}\n            </RadioGroup>\n          </FormControl>\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <FormControl component='fieldset'>\n            {Object.keys(functions).map((key) => (\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={functions[key]}\n                    name={key}\n                    key={key}\n                    onChange={(event) => {\n                      setFunction(event)\n                    }}\n                    disabled={algorithmState !== 'BEFORE_RUN'}\n                  />\n                }\n                label={key}\n              />\n            ))}\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid container spacing={2}>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <Button\n            className={classes.button}\n            variant='contained'\n            color='primary'\n            onClick={createGenerationZeroButtonFunction}\n          >\n            Create first generation\n          </Button>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <Button\n            className={classes.button}\n            variant='contained'\n            color='primary'\n            onClick={createNextGenerationButtonFunction}\n            // disabled={algorithmState === 'BEFORE_RUN'}\n          >\n            Create Next Generation\n          </Button>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <Button className={classes.button} variant='contained' color='primary' onClick={runButtonFunction}>\n            Run N Generations\n          </Button>\n        </Grid>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <TextField\n            // id={name}\n            // key={name}\n            // label={name.split('-').map(capitalise).join(' ')}\n            label='Number of generations to run'\n            type='number'\n            value={numberOfgeneraionsToRun}\n            onChange={(e) => setNumberOfgeneraionsToRun(e.target.value)}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            variant='outlined'\n            // disabled={algorithmState !== 'BEFORE_RUN'}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6} md={3} lg={2}>\n          <Button className={classes.button} variant='contained' color='primary' onClick={resetAlgorithmState}>\n            Reset\n          </Button>\n        </Grid>\n        {/* <Button variant='contained' color='primary'>\n          Primary\n        </Button>\n        <Button variant='contained' color='primary'>\n          Primary\n        </Button> */}\n      </Grid>\n    </form>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n    currentGeneration,\n    desiredGeneration,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n    algorithmState,\n    currentGeneration,\n    desiredGeneration,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n    resetAlgorithmState: () => dispatch({ type: 'SET_ALGORITHM_STATE', value: 'BEFORE_RUN' }),\n    setDesiredGeneration: (value) => dispatch({ type: 'SET_DESIRED_GENERAION', value }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Inputs)\nexport default Container\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { connect } from 'react-redux'\n// import Highlight from 'react-highlight.js'\nimport Button from '@material-ui/core/Button'\nimport { Typography } from '@material-ui/core'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nconst useStyles = makeStyles({\n  table: {\n    // minWidth: 650,\n  },\n})\n\nfunction Visuals({ generation, bestSpecimens, bestSpecimen }) {\n  const classes = useStyles()\n  const [code, setCode] = useState(bestSpecimen?.code)\n  const mapSpecimenToRow = (row, i, title) => (\n    <TableRow key={i}>\n      <TableCell component='th' scope='row' align='right'>\n        {title || i + 1}\n      </TableCell>\n      <TableCell align='right'>\n        <Typography>{row.function}</Typography>\n      </TableCell>\n      <TableCell align='right'>{row.fitness}</TableCell>\n      <TableCell align='right'>\n        <Button variant='contained' color='primary' onClick={() => setCode(row.code)}>\n          Show code\n        </Button>\n      </TableCell>\n    </TableRow>\n  )\n  return (\n    <>\n      <h1>Generation: {generation}</h1>\n      {code || bestSpecimen?.code ? (\n        <>\n          <h2>Code:</h2>\n          <SyntaxHighlighter\n            language='javascript'\n            lineProps={{ style: { wordBreak: 'break-all', whiteSpace: 'pre-wrap' } }}\n            wrapLines={true}\n          >\n            {code || bestSpecimen?.code}\n          </SyntaxHighlighter>\n        </>\n      ) : (\n        <></>\n      )}\n\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label='simple table'>\n          {(bestSpecimen ? [bestSpecimen] : []).map((row, i) => mapSpecimenToRow(row, i, 'Global Best'))}\n          <TableHead>\n            <TableRow>\n              <TableCell align='right'>Number</TableCell>\n              <TableCell align='right'>Function</TableCell>\n              <TableCell align='right'>Error Squared</TableCell>\n              <TableCell align='right'>Show Code</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{bestSpecimens.map((row, i) => mapSpecimenToRow(row, i))}</TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  )\n}\nconst mapStateToProps = (state) => {\n  const { currentGeneration, bestSpecimens, bestSpecimen } = state\n  return {\n    generation: currentGeneration,\n    bestSpecimens,\n    bestSpecimen,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    // setValue: (field, value) => dispatch({ type: 'INPUT_CHANGE', value, field }),\n    // setFunction: (event) => dispatch({ type: 'SET_FUNCTION', name: event.target.name, value: event.target.checked }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(Visuals)\nexport default Container\n","import React from 'react'\nimport { connect } from 'react-redux'\n// import * as R from 'ramda'\n\nfunction App({\n  algorithm,\n  problemType,\n  populationSize,\n  numberOfGenerations,\n  maxTreeDepth,\n  tournamentSize,\n  tournamentWinningProbability,\n  crossoverProbability,\n  pointsRaw,\n  leavesRaw,\n  setFunctions,\n  functions,\n  setAlgorithmState,\n  setCurrentGeneration,\n  setBestSpecimens,\n  setBestSpecimen,\n}) {\n  algorithm.setProperty('populationSize', Number(populationSize))\n  algorithm.setProperty('numberOfGenerations', Number(numberOfGenerations))\n  algorithm.setProperty('maxTreeDepth', Number(maxTreeDepth))\n  algorithm.setProperty('tournamentSize', Number(tournamentSize))\n  algorithm.setProperty('tournamentWinningProbability', Number(tournamentWinningProbability))\n  algorithm.setProperty('crossoverProbability', Number(crossoverProbability))\n  algorithm.setProperty('pointsRaw', pointsRaw)\n  algorithm.setProperty('leavesRaw', leavesRaw)\n  if (Object.keys(functions).length !== 0) {\n    algorithm.setUserSelectedFunctions(functions)\n  } else {\n    setFunctions(algorithm.getUserSelectedFunctions())\n  }\n  console.log(problemType, algorithm.problemType)\n  console.log(problemType !== algorithm.problemType)\n  if (problemType !== algorithm.problemType) {\n    algorithm.setProperty('problemType', problemType)\n    setFunctions(algorithm.getUserSelectedFunctions())\n  }\n\n  algorithm.setReduxSetters({ setAlgorithmState, setCurrentGeneration, setBestSpecimens, setBestSpecimen })\n  return <></>\n}\nconst mapStateToProps = (state) => {\n  const {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n  } = state\n  return {\n    problemType,\n    populationSize,\n    numberOfGenerations,\n    maxTreeDepth,\n    tournamentSize,\n    tournamentWinningProbability,\n    crossoverProbability,\n    pointsRaw,\n    leavesRaw,\n    functions,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setFunctions: (functions) => dispatch({ type: 'SET_FUNCTIONS', functions }),\n    setAlgorithmState: (value) => dispatch({ type: 'SET_ALGORITHM_STATE', value }),\n    setCurrentGeneration: (value) => dispatch({ type: 'SET_CURRENT_GENERATION', value }),\n    setBestSpecimens: (value) => dispatch({ type: 'SET_BEST_SPECIMENS', value }),\n    setBestSpecimen: (value) => dispatch({ type: 'SET_BEST_SPECIMEN', value }),\n  }\n}\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App)\nexport default Container\n","import * as R from 'ramda'\n\nconst addNameAndArity = R.mapObjIndexed((v, k) => ({ ...v, name: k, arity: v.function.length }))\n\nconst protectedDivide = (a, b) => (b !== 0 ? a / b : a)\n\nconst protectedLog = (a, b) => (a > 0 && b > 0 && a !== 1 ? Math.log(b) / Math.log(a) : 0)\n\nconst protectedSqrt = (a) => Math.sqrt(Math.abs(a))\n\nconst bitwiseXor = (a,b) => (a && !b) || (!a && b)\n\nconst ifThenElse = (a,b,c) => a ? b : c\n\nexport default addNameAndArity({\n  add: {\n    function: (a, b) => a + b,\n    toCode: (a, b) => `(${a} + ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  subtract: {\n    function: (a, b) => a - b,\n    toCode: (a, b) => `(${a} - ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  multiply: {\n    function: (a, b) => a * b,\n    toCode: (a, b) => `${a} * ${b}`,\n    onlyFor: ['integer', 'real'],\n  },\n  divide: {\n    function: (a, b) => a / b,\n    toCode: (a, b) => `${a} / ${b}`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedDivide: {\n    function: protectedDivide,\n    toCode: (a, b) => `protectedDivide(${a}, ${b})`,\n    codeAddition: `const protectedDivide = ${protectedDivide.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  min: {\n    function: (a, b) => Math.min(a, b),\n    toCode: (a, b) => `Math.min(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  max: {\n    function: (a, b) => Math.max(a, b),\n    toCode: (a, b) => `Math.max(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  exp: {\n    function: (a) => Math.exp(a),\n    toCode: (a) => `Math.exp(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  pow: {\n    function: (a, b) => Math.pow(a, b),\n    toCode: (a, b) => `Math.pow(${a}, ${b})`,\n    onlyFor: ['integer', 'real'],\n  },\n  log: {\n    function: (a, b) => Math.log(b) / Math.log(a),\n    toCode: (a, b) => `Math.log(${b}) / Math.log(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedLog: {\n    function: protectedLog,\n    toCode: (a, b) => `protectedLog(${a}, ${b})`,\n    codeAddition: `const protectedLog = ${protectedLog.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  sin: {\n    function: (a) => Math.sin(a),\n    toCode: (a) => `Math.sin(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  cos: {\n    function: (a) => Math.cos(a),\n    toCode: (a) => `Math.cos(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  sqrt: {\n    function: (a) => Math.sqrt(a),\n    toCode: (a) => `Math.sqrt(${a})`,\n    onlyFor: ['integer', 'real'],\n  },\n  protectedSqrt: {\n    function: protectedSqrt,\n    toCode: (a) => `protectedSqrt(${a})`,\n    codeAddition: `const protectedSqrt = ${protectedSqrt.toString()}`,\n    onlyFor: ['integer', 'real'],\n  },\n  neg: {\n    function: (a) => -a,\n    toCode: (a) => `-${a}`,\n    onlyFor: ['integer', 'real'],\n  },\n  or: {\n    function: (a, b) => a | b,\n    toCode: (a, b) => `(${a} | ${b})`,\n    onlyFor: ['integer'],\n  },\n  and: {\n    function: (a, b) => a & b,\n    toCode: (a, b) => `(${a} & ${b})`,\n    onlyFor: ['integer'],\n  },\n  xor: {\n    function: (a, b) => a ^ b,\n    toCode: (a, b) => `(${a} ^ ${b})`,\n    onlyFor: ['integer'],\n  },\n  bitwiseOr: {\n    function: (a, b) => a | b,\n    toCode: (a, b) => `(${a} || ${b})`,\n    onlyFor: ['boolean'],\n  },\n  bitwiseAnd: {\n    function: (a, b) => a && b,\n    toCode: (a, b) => `(${a} && ${b})`,\n    onlyFor: ['boolean'],\n  },\n  bitwiseXor: {\n    function: bitwiseXor,\n    toCode: (a, b) => `bitwiseXor(${a}, ${b})`,\n    codeAddition: `const bitwiseXor = ${bitwiseXor.toString()}`,\n    onlyFor: ['boolean'],\n  },\n  ifThenElse: {\n    function: ifThenElse,\n    toCode: (a, b, c) => `ifThenElse(${a}, ${b}, ${c})`,\n    codeAddition: `const ifThenElse = ${ifThenElse.toString()}`,\n    onlyFor: ['boolean'],\n  },\n  not: {\n    function: (a) => !a,\n    toCode: (a) => `!(${a})`,\n    onlyFor: ['boolean'],\n  },\n})\n","import {\n  getRandom,\n  mapSpecimenToStorable,\n  // stringifySpecimen,\n  trueWithProbabilty,\n  // sample,\n  // tournament,\n  structuredClone,\n  chooseOne,\n  randomIntInRange,\n} from './util'\nimport functions from './functions'\nimport * as R from 'ramda'\nconst { specimenEvaluator } = require('./evaluate')\nconst { generateTree, mutate, crossover } = require('./treeGenerator')\nconst { assignFitness } = require('./fitness')\n\nexport default class Algorithm {\n  constructor() {\n    this.problemType = 'real'\n    this.running = false\n    this.mode = 'Fullnt'\n    this.reduxSetters = {}\n    this.functions = functions\n    this.inputVariables = []\n    this.calculateUsableFuncitons()\n    this.evaluate = specimenEvaluator(functions)\n    this.currentGenerationNumber = 0\n    console.log({ functions })\n    this.sortingFunction = (a, b) =>\n      isNaN(a.fitness)\n        ? 1\n        : isNaN(b.fitness)\n        ? -1\n        : a.fitness > b.fitness\n        ? 1\n        : b.fitness > a.fitness\n        ? -1\n        : a.subNodesCount > b.subNodesCount\n        ? 1\n        : b.subNodesCount > a.subNodesCount\n        ? -1\n        : 0\n  }\n\n  calculateUsableFuncitons() {\n    console.log(this.problemType)\n    this.functionsArray = Object.values(functions).filter(({ onlyFor }) => onlyFor.includes(this.problemType))\n    this.userSelectedFunctions = R.mergeAll(\n      Object.keys(this.functions)\n        .filter((e) => this.functions[e].onlyFor.includes(this.problemType))\n        .map((e) => ({ [e]: true })),\n    )\n    console.log('test:', this.userSelectedFunctions)\n    console.log(\n      R.mergeAll(\n        Object.keys(this.functions)\n          .filter((e) => this.functions[e].onlyFor.includes(this.problemType))\n          .map((e) => ({ [e]: true })),\n      ),\n    )\n  }\n\n  getUserSelectedFunctions() {\n    console.log(this.userSelectedFunctions)\n    return this.userSelectedFunctions\n  }\n\n  setUserSelectedFunctions(functions) {\n    this.userSelectedFunctions = R.mergeAll(\n      Object.keys(this.userSelectedFunctions).map((e) => ({ [e]: !!functions[e] })),\n    )\n    this.functionsArray = Object.values(this.functions).filter(\n      (x) => !!functions[x.name] && x.onlyFor.includes(this.problemType),\n    )\n  }\n\n  setReduxSetters(setters) {\n    this.reduxSetters = { ...this.reduxSetters, ...setters }\n  }\n\n  setProperty(name, value) {\n    this[name] = value\n    if (name === 'problemType') {\n      this.calculateUsableFuncitons()\n    }\n  }\n\n  parsePoints() {\n    const parseSinglePoint = {\n      real: (e) => Number(e),\n      integer: (e) => Math.round(Number(e)),\n      boolean: (e) => ['true', '1'].includes(e.trim().toLowerCase())\n    }[this.problemType]\n    this.points = this.pointsRaw.split('\\n').map((line) => {\n      const vars = line.split(',').map((e) => parseSinglePoint(e))\n      const xs = vars.slice(0, -1)\n      const y = vars.slice(-1)[0]\n      return {\n        ...xs.reduce((acc, x) => ({ value: { ...acc.value, [`x${acc.i}`]: x }, i: acc.i + 1 }), { value: {}, i: 0 })\n          .value,\n        y,\n      }\n    })\n    console.log({ points: this.points })\n  }\n\n  parseLeaves() {\n    const isRange = (e) => e.startsWith('(') && e.endsWith(')')\n    const fromInput =\n      this.problemType !== 'boolean'\n        ? this.leavesRaw.split('\\n').map((line) => {\n            if (isRange(line)) {\n              const [min, max] = line\n                .slice(1, -1)\n                .split(',')\n                .map((e) => Number(e))\n              return this.problemType === 'real' ? () => getRandom(min, max) : () => randomIntInRange(min, max)\n            } else {\n              return () => Number(line)\n            }\n          })\n        : [true, false].map((e) => () => e)\n    this.inputVariables = Object.keys(this.points[0]).filter((e) => e !== 'y')\n    const fromPoints = this.inputVariables.map((e) => {\n      return () => e\n    })\n\n    this.leavesFunctions = [...fromInput, ...fromPoints]\n  }\n\n  createGenerationZero() {\n    // console.log(this.inputs)\n    const generation = [...Array(this.populationSize).keys()].map(() =>\n      generateTree('', this.functionsArray, this.leavesFunctions, this.maxTreeDepth),\n    )\n    generation.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    generation.sort(this.sortingFunction)\n    this.generation = generation\n  }\n\n  // async asyncCrossover(i) {\n\n  // }\n\n  async generateNextGeneration() {\n    const newGeneration = [...Array(this.populationSize).keys()]\n    let i = 0\n    while (i < newGeneration.length) {\n      if (i < newGeneration.length - 1 && trueWithProbabilty(this.crossoverProbability)) {\n        const chosen1 = chooseOne(this.generation, this.tournamentSize)\n        // console.log({chosen1})\n        // console.log(stringifySpecimen(chosen1))\n        const chosen2 = chooseOne(this.generation, this.tournamentSize)\n        const [a, b] = crossover(chosen1, chosen2)\n        newGeneration[i] = a\n        i++\n        newGeneration[i] = b\n        i++\n      } else {\n        const chosen = chooseOne(this.generation, this.tournamentSize)\n        // console.log(stringifySpecimen(chosen))\n        newGeneration[i] = mutate(chosen, this.mode, this.functionsArray, this.leavesFunctions, this.maxTreeDepth)\n        i++\n      }\n      if (i % 5000 === 0) {\n        console.log(i)\n      }\n    }\n\n    // await Promise.all(newGeneration.map((a) => new Promise(() => assignFitness(this.evaluate, this.points, a))))\n    newGeneration.forEach((a) => assignFitness(this.evaluate, this.points, a))\n    newGeneration.sort(this.sortingFunction)\n    this.newGeneration = newGeneration\n  }\n\n  setBestSpecimensRedux() {\n    this.reduxSetters.setBestSpecimens(\n      this.generation.slice(0, 10).map((e) => mapSpecimenToStorable(e, this.functions, this.inputVariables)),\n    )\n  }\n\n  startAndCreateFirstGeneration() {\n    this.reduxSetters.setAlgorithmState('RUNNING')\n    this.parsePoints()\n    this.parseLeaves()\n    this.currentGenerationNumber = 1\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    this.createGenerationZero()\n    this.bestSpecimen = structuredClone(this.generation[0])\n    this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions, this.inputVariables))\n    this.setBestSpecimensRedux()\n  }\n\n  async createNextGeneration() {\n    this.parsePoints()\n    this.parseLeaves()\n    this.currentGenerationNumber++\n    this.reduxSetters.setCurrentGeneration(this.currentGenerationNumber)\n    await this.generateNextGeneration()\n    this.generation = this.newGeneration\n\n    this.setBestSpecimensRedux()\n\n    const bestSpecimenThisGeneration = this.generation[0]\n    const isCurrentBestBetterThanGlobalbest = this.sortingFunction(this.bestSpecimen, bestSpecimenThisGeneration) === 1\n    if (isCurrentBestBetterThanGlobalbest) {\n      this.bestSpecimen = structuredClone(bestSpecimenThisGeneration)\n      this.reduxSetters.setBestSpecimen(mapSpecimenToStorable(this.bestSpecimen, this.functions, this.inputVariables))\n    }\n\n    // console.log(stringifySpecimen(this.bestSpecimen), this.bestSpecimen.fitness)\n    // if (this.currentGenerationNumber >= this.numberOfGenerations) this.reduxSetters.setAlgorithmState('FINISHED')\n  }\n  async runIfNotFinished() {\n    this.parsePoints()\n    this.parseLeaves()\n    if (this.currentGenerationNumber >= this.numberOfGenerations) return true\n    if (this.currentGenerationNumber === 0) {\n      this.startAndCreateFirstGeneration()\n    } else {\n      await this.createNextGeneration()\n    }\n    return false\n  }\n}\n","import './App.css'\nimport Inputs from './inputs'\nimport Visuals from './visuals'\nimport Logic from './logic/Component'\nimport Algorithm from './logic/Algorithm'\nexport default function App() {\n  const algorithm = new Algorithm()\n  return (\n    <div className='App'>\n      <Inputs algorithm={algorithm}></Inputs>\n      <Visuals></Visuals>\n      <Logic algorithm={algorithm}></Logic>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const points = [...Array(20).keys()].map((a) => {\n  const x = a / 10\n  return {\n    x: x.toFixed(2),\n    y: (x * x - x).toFixed(2),\n  }\n})\n\nconst defaultState = {\n  problemType: 'real',\n  populationSize: 25000,\n  desiredGeneration: 0,\n  // numberOfGenerations: 2,\n  maxTreeDepth: 6,\n  tournamentSize: 50,\n  // tournamentWinningProbability: 0.5,\n  crossoverProbability: 0.5,\n  pointsRaw: points.map(({ x, y }) => `${x}, ${y}`).join('\\n'),\n  leavesRaw: ['1', '-1', '(-10,10)'].join('\\n'),\n  functions: {},\n  bestSpecimens: [],\n  bestSpecimen: null,\n  currentGeneration: '0',\n  algorithmState: 'BEFORE_RUN',\n}\n\nexport const mainReducer = function (state = defaultState, action) {\n  switch (action.type) {\n    case 'INPUT_CHANGE':\n      return state.algorithmState === 'RUNNING'\n        ? state\n        : {\n            ...state,\n            [action.field]: action.value,\n          }\n    case 'SET_FUNCTIONS':\n      return {\n        ...state,\n        functions: action.functions,\n      }\n    case 'SET_FUNCTION':\n      return {\n        ...state,\n        functions: {\n          ...state.functions,\n          [action.name]: action.value,\n        },\n      }\n    case 'SET_ALGORITHM_STATE':\n      return {\n        ...state,\n        algorithmState: action.value,\n        desiredGeneration: action.value === 'BEFORE_RUN' ? 0 : state.desiredGeneration,\n      }\n    case 'SET_CURRENT_GENERATION':\n      return {\n        ...state,\n        currentGeneration: action.value,\n      }\n    case 'SET_BEST_SPECIMENS':\n      return {\n        ...state,\n        bestSpecimens: action.value,\n      }\n    case 'SET_BEST_SPECIMEN':\n      return {\n        ...state,\n        bestSpecimen: action.value,\n      }\n    case 'SET_DESIRED_GENERAION':\n      return {\n        ...state,\n        desiredGeneration: action.value,\n      }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { createStore } from 'redux'\nimport { mainReducer } from './reducers'\nimport { Provider } from 'react-redux'\n\nimport { composeWithDevTools } from 'redux-devtools-extension'\nconst store = createStore(mainReducer, composeWithDevTools())\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}